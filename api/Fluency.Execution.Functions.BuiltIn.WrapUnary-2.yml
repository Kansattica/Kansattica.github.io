### YamlMime:ManagedReference
items:
- uid: Fluency.Execution.Functions.BuiltIn.WrapUnary`2
  commentId: T:Fluency.Execution.Functions.BuiltIn.WrapUnary`2
  id: WrapUnary`2
  parent: Fluency.Execution.Functions.BuiltIn
  children:
  - Fluency.Execution.Functions.BuiltIn.WrapUnary`2.#ctor(Func{`0,`1},FluencyType,System.String)
  - Fluency.Execution.Functions.BuiltIn.WrapUnary`2.Name
  - Fluency.Execution.Functions.BuiltIn.WrapUnary`2.Top
  - Fluency.Execution.Functions.BuiltIn.WrapUnary`2.TopInput
  langs:
  - csharp
  - vb
  name: WrapUnary<TRealIn, TRealOut>
  nameWithType: WrapUnary<TRealIn, TRealOut>
  fullName: Fluency.Execution.Functions.BuiltIn.WrapUnary<TRealIn, TRealOut>
  type: Class
  source:
    id: WrapUnary
    path: ''
    startLine: 1724
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Functions.BuiltIn
  summary: "\nWrap a C# function that takes one argument and returns one value as a Fluency function.\nThis is how Sqrt, Floor, Not, and ParseInt are implemented.\n"
  example: []
  syntax:
    content: 'public class WrapUnary<TRealIn, TRealOut> : ITopIn, ITopOut, IFunction'
    typeParameters:
    - id: TRealIn
    - id: TRealOut
    content.vb: >-
      Public Class WrapUnary(Of TRealIn, TRealOut)
          Implements ITopIn, ITopOut, IFunction
  inheritance:
  - System.Object
  implements:
  - Fluency.Execution.Functions.ITopIn
  - Fluency.Execution.Functions.ITopOut
  - Fluency.Execution.Functions.IFunction
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: WrapUnary(Of TRealIn, TRealOut)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapUnary(Of TRealIn, TRealOut)
  name.vb: WrapUnary(Of TRealIn, TRealOut)
- uid: Fluency.Execution.Functions.BuiltIn.WrapUnary`2.Name
  commentId: P:Fluency.Execution.Functions.BuiltIn.WrapUnary`2.Name
  id: Name
  parent: Fluency.Execution.Functions.BuiltIn.WrapUnary`2
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: WrapUnary<TRealIn, TRealOut>.Name
  fullName: Fluency.Execution.Functions.BuiltIn.WrapUnary<TRealIn, TRealOut>.Name
  type: Property
  source:
    id: Name
    path: ''
    startLine: 1729
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Functions.BuiltIn
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Fluency.Execution.Functions.BuiltIn.WrapUnary`2.Name*
  implements:
  - Fluency.Execution.Functions.IFunction.Name
  nameWithType.vb: WrapUnary(Of TRealIn, TRealOut).Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapUnary(Of TRealIn, TRealOut).Name
- uid: Fluency.Execution.Functions.BuiltIn.WrapUnary`2.TopInput
  commentId: P:Fluency.Execution.Functions.BuiltIn.WrapUnary`2.TopInput
  id: TopInput
  parent: Fluency.Execution.Functions.BuiltIn.WrapUnary`2
  langs:
  - csharp
  - vb
  name: TopInput
  nameWithType: WrapUnary<TRealIn, TRealOut>.TopInput
  fullName: Fluency.Execution.Functions.BuiltIn.WrapUnary<TRealIn, TRealOut>.TopInput
  type: Property
  source:
    id: TopInput
    path: ''
    startLine: 1731
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Functions.BuiltIn
  syntax:
    content: public GetNext TopInput { set; }
    parameters: []
    return:
      type: Fluency.Execution.Functions.GetNext
    content.vb: Public WriteOnly Property TopInput As GetNext
  overload: Fluency.Execution.Functions.BuiltIn.WrapUnary`2.TopInput*
  implements:
  - Fluency.Execution.Functions.ITopIn.TopInput
  nameWithType.vb: WrapUnary(Of TRealIn, TRealOut).TopInput
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapUnary(Of TRealIn, TRealOut).TopInput
- uid: Fluency.Execution.Functions.BuiltIn.WrapUnary`2.#ctor(Func{`0,`1},FluencyType,System.String)
  commentId: M:Fluency.Execution.Functions.BuiltIn.WrapUnary`2.#ctor(Func{`0,`1},FluencyType,System.String)
  id: '#ctor(Func{`0,`1},FluencyType,System.String)'
  parent: Fluency.Execution.Functions.BuiltIn.WrapUnary`2
  langs:
  - csharp
  - vb
  name: WrapUnary(Func<TRealIn, TRealOut>, FluencyType, String)
  nameWithType: WrapUnary<TRealIn, TRealOut>.WrapUnary(Func<TRealIn, TRealOut>, FluencyType, String)
  fullName: Fluency.Execution.Functions.BuiltIn.WrapUnary<TRealIn, TRealOut>.WrapUnary(Func<TRealIn, TRealOut>, FluencyType, System.String)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 1733
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Functions.BuiltIn
  syntax:
    content: public WrapUnary(Func<TRealIn, TRealOut> function, FluencyType returnType, string name)
    parameters:
    - id: function
      type: Func{{TRealIn},{TRealOut}}
    - id: returnType
      type: FluencyType
    - id: name
      type: System.String
    content.vb: Public Sub New(function As Func(Of TRealIn, TRealOut), returnType As FluencyType, name As String)
  overload: Fluency.Execution.Functions.BuiltIn.WrapUnary`2.#ctor*
  nameWithType.vb: WrapUnary(Of TRealIn, TRealOut).WrapUnary(Func(Of TRealIn, TRealOut), FluencyType, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapUnary(Of TRealIn, TRealOut).WrapUnary(Func(Of TRealIn, TRealOut), FluencyType, System.String)
  name.vb: WrapUnary(Func(Of TRealIn, TRealOut), FluencyType, String)
- uid: Fluency.Execution.Functions.BuiltIn.WrapUnary`2.Top
  commentId: M:Fluency.Execution.Functions.BuiltIn.WrapUnary`2.Top
  id: Top
  parent: Fluency.Execution.Functions.BuiltIn.WrapUnary`2
  langs:
  - csharp
  - vb
  name: Top()
  nameWithType: WrapUnary<TRealIn, TRealOut>.Top()
  fullName: Fluency.Execution.Functions.BuiltIn.WrapUnary<TRealIn, TRealOut>.Top()
  type: Method
  source:
    id: Top
    path: ''
    startLine: 1740
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Functions.BuiltIn
  syntax:
    content: public Value Top()
    return:
      type: Fluency.Execution.Functions.Value
    content.vb: Public Function Top As Value
  overload: Fluency.Execution.Functions.BuiltIn.WrapUnary`2.Top*
  implements:
  - Fluency.Execution.Functions.ITopOut.Top
  nameWithType.vb: WrapUnary(Of TRealIn, TRealOut).Top()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapUnary(Of TRealIn, TRealOut).Top()
references:
- uid: Fluency.Execution.Functions.BuiltIn
  commentId: N:Fluency.Execution.Functions.BuiltIn
  name: Fluency.Execution.Functions.BuiltIn
  nameWithType: Fluency.Execution.Functions.BuiltIn
  fullName: Fluency.Execution.Functions.BuiltIn
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Fluency.Execution.Functions.ITopIn
  commentId: T:Fluency.Execution.Functions.ITopIn
  parent: Fluency.Execution.Functions
  name: ITopIn
  nameWithType: ITopIn
  fullName: Fluency.Execution.Functions.ITopIn
- uid: Fluency.Execution.Functions.ITopOut
  commentId: T:Fluency.Execution.Functions.ITopOut
  parent: Fluency.Execution.Functions
  name: ITopOut
  nameWithType: ITopOut
  fullName: Fluency.Execution.Functions.ITopOut
- uid: Fluency.Execution.Functions.IFunction
  commentId: T:Fluency.Execution.Functions.IFunction
  parent: Fluency.Execution.Functions
  name: IFunction
  nameWithType: IFunction
  fullName: Fluency.Execution.Functions.IFunction
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Fluency.Execution.Functions
  commentId: N:Fluency.Execution.Functions
  name: Fluency.Execution.Functions
  nameWithType: Fluency.Execution.Functions
  fullName: Fluency.Execution.Functions
- uid: Fluency.Execution.Functions.BuiltIn.WrapUnary`2.Name*
  commentId: Overload:Fluency.Execution.Functions.BuiltIn.WrapUnary`2.Name
  name: Name
  nameWithType: WrapUnary<TRealIn, TRealOut>.Name
  fullName: Fluency.Execution.Functions.BuiltIn.WrapUnary<TRealIn, TRealOut>.Name
  nameWithType.vb: WrapUnary(Of TRealIn, TRealOut).Name
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapUnary(Of TRealIn, TRealOut).Name
- uid: Fluency.Execution.Functions.IFunction.Name
  commentId: P:Fluency.Execution.Functions.IFunction.Name
  parent: Fluency.Execution.Functions.IFunction
  name: Name
  nameWithType: IFunction.Name
  fullName: Fluency.Execution.Functions.IFunction.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Fluency.Execution.Functions.BuiltIn.WrapUnary`2.TopInput*
  commentId: Overload:Fluency.Execution.Functions.BuiltIn.WrapUnary`2.TopInput
  name: TopInput
  nameWithType: WrapUnary<TRealIn, TRealOut>.TopInput
  fullName: Fluency.Execution.Functions.BuiltIn.WrapUnary<TRealIn, TRealOut>.TopInput
  nameWithType.vb: WrapUnary(Of TRealIn, TRealOut).TopInput
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapUnary(Of TRealIn, TRealOut).TopInput
- uid: Fluency.Execution.Functions.ITopIn.TopInput
  commentId: P:Fluency.Execution.Functions.ITopIn.TopInput
  parent: Fluency.Execution.Functions.ITopIn
  name: TopInput
  nameWithType: ITopIn.TopInput
  fullName: Fluency.Execution.Functions.ITopIn.TopInput
- uid: Fluency.Execution.Functions.GetNext
  commentId: T:Fluency.Execution.Functions.GetNext
  parent: Fluency.Execution.Functions
  name: GetNext
  nameWithType: GetNext
  fullName: Fluency.Execution.Functions.GetNext
- uid: Fluency.Execution.Functions.BuiltIn.WrapUnary`2.#ctor*
  commentId: Overload:Fluency.Execution.Functions.BuiltIn.WrapUnary`2.#ctor
  name: WrapUnary
  nameWithType: WrapUnary<TRealIn, TRealOut>.WrapUnary
  fullName: Fluency.Execution.Functions.BuiltIn.WrapUnary<TRealIn, TRealOut>.WrapUnary
  nameWithType.vb: WrapUnary(Of TRealIn, TRealOut).WrapUnary
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapUnary(Of TRealIn, TRealOut).WrapUnary
- uid: Func{{TRealIn},{TRealOut}}
  commentId: '!:Func{`0,`1}'
  definition: Func`2
  name: Func<TRealIn, TRealOut>
  nameWithType: Func<TRealIn, TRealOut>
  fullName: Func<TRealIn, TRealOut>
  nameWithType.vb: Func(Of TRealIn, TRealOut)
  fullName.vb: Func(Of TRealIn, TRealOut)
  name.vb: Func(Of TRealIn, TRealOut)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRealIn
    nameWithType: TRealIn
    fullName: TRealIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealOut
    nameWithType: TRealOut
    fullName: TRealOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRealIn
    nameWithType: TRealIn
    fullName: TRealIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealOut
    nameWithType: TRealOut
    fullName: TRealOut
  - name: )
    nameWithType: )
    fullName: )
- uid: FluencyType
  isExternal: true
  name: FluencyType
  nameWithType: FluencyType
  fullName: FluencyType
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.BuiltIn.WrapUnary`2.Top*
  commentId: Overload:Fluency.Execution.Functions.BuiltIn.WrapUnary`2.Top
  name: Top
  nameWithType: WrapUnary<TRealIn, TRealOut>.Top
  fullName: Fluency.Execution.Functions.BuiltIn.WrapUnary<TRealIn, TRealOut>.Top
  nameWithType.vb: WrapUnary(Of TRealIn, TRealOut).Top
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapUnary(Of TRealIn, TRealOut).Top
- uid: Fluency.Execution.Functions.ITopOut.Top
  commentId: M:Fluency.Execution.Functions.ITopOut.Top
  parent: Fluency.Execution.Functions.ITopOut
  name: Top()
  nameWithType: ITopOut.Top()
  fullName: Fluency.Execution.Functions.ITopOut.Top()
  spec.csharp:
  - uid: Fluency.Execution.Functions.ITopOut.Top
    name: Top
    nameWithType: ITopOut.Top
    fullName: Fluency.Execution.Functions.ITopOut.Top
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Functions.ITopOut.Top
    name: Top
    nameWithType: ITopOut.Top
    fullName: Fluency.Execution.Functions.ITopOut.Top
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.Value
  commentId: T:Fluency.Execution.Functions.Value
  parent: Fluency.Execution.Functions
  name: Value
  nameWithType: Value
  fullName: Fluency.Execution.Functions.Value
