### YamlMime:ManagedReference
items:
- uid: Fluency.Execution.Exceptions.ExecutionException
  commentId: T:Fluency.Execution.Exceptions.ExecutionException
  id: ExecutionException
  parent: Fluency.Execution.Exceptions
  children:
  - Fluency.Execution.Exceptions.ExecutionException.#ctor(System.String,Exception)
  - Fluency.Execution.Exceptions.ExecutionException.#ctor(System.String,Exception,System.Object[])
  - Fluency.Execution.Exceptions.ExecutionException.#ctor(System.String,System.Object[])
  langs:
  - csharp
  - vb
  name: ExecutionException
  nameWithType: ExecutionException
  fullName: Fluency.Execution.Exceptions.ExecutionException
  type: Class
  source:
    id: ExecutionException
    path: ''
    startLine: 44
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Exceptions
  syntax:
    content: 'public class ExecutionException : Exception'
    content.vb: >-
      Public Class ExecutionException
          Inherits Exception
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Fluency.Execution.Exceptions.ExecutionException.#ctor(System.String,System.Object[])
  commentId: M:Fluency.Execution.Exceptions.ExecutionException.#ctor(System.String,System.Object[])
  id: '#ctor(System.String,System.Object[])'
  parent: Fluency.Execution.Exceptions.ExecutionException
  langs:
  - csharp
  - vb
  name: ExecutionException(String, Object[])
  nameWithType: ExecutionException.ExecutionException(String, Object[])
  fullName: Fluency.Execution.Exceptions.ExecutionException.ExecutionException(System.String, System.Object[])
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 46
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Exceptions
  syntax:
    content: public ExecutionException(string message, params object[] args)
    parameters:
    - id: message
      type: System.String
    - id: args
      type: System.Object[]
    content.vb: Public Sub New(message As String, ParamArray args As Object())
  overload: Fluency.Execution.Exceptions.ExecutionException.#ctor*
  nameWithType.vb: ExecutionException.ExecutionException(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Fluency.Execution.Exceptions.ExecutionException.ExecutionException(System.String, System.Object())
  name.vb: ExecutionException(String, Object())
- uid: Fluency.Execution.Exceptions.ExecutionException.#ctor(System.String,Exception)
  commentId: M:Fluency.Execution.Exceptions.ExecutionException.#ctor(System.String,Exception)
  id: '#ctor(System.String,Exception)'
  parent: Fluency.Execution.Exceptions.ExecutionException
  langs:
  - csharp
  - vb
  name: ExecutionException(String, Exception)
  nameWithType: ExecutionException.ExecutionException(String, Exception)
  fullName: Fluency.Execution.Exceptions.ExecutionException.ExecutionException(System.String, Exception)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 50
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Exceptions
  syntax:
    content: public ExecutionException(string message, Exception innerException)
    parameters:
    - id: message
      type: System.String
    - id: innerException
      type: Exception
    content.vb: Public Sub New(message As String, innerException As Exception)
  overload: Fluency.Execution.Exceptions.ExecutionException.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Fluency.Execution.Exceptions.ExecutionException.#ctor(System.String,Exception,System.Object[])
  commentId: M:Fluency.Execution.Exceptions.ExecutionException.#ctor(System.String,Exception,System.Object[])
  id: '#ctor(System.String,Exception,System.Object[])'
  parent: Fluency.Execution.Exceptions.ExecutionException
  langs:
  - csharp
  - vb
  name: ExecutionException(String, Exception, Object[])
  nameWithType: ExecutionException.ExecutionException(String, Exception, Object[])
  fullName: Fluency.Execution.Exceptions.ExecutionException.ExecutionException(System.String, Exception, System.Object[])
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 54
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Exceptions
  syntax:
    content: public ExecutionException(string message, Exception innerException, params object[] args)
    parameters:
    - id: message
      type: System.String
    - id: innerException
      type: Exception
    - id: args
      type: System.Object[]
    content.vb: Public Sub New(message As String, innerException As Exception, ParamArray args As Object())
  overload: Fluency.Execution.Exceptions.ExecutionException.#ctor*
  nameWithType.vb: ExecutionException.ExecutionException(String, Exception, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Fluency.Execution.Exceptions.ExecutionException.ExecutionException(System.String, Exception, System.Object())
  name.vb: ExecutionException(String, Exception, Object())
references:
- uid: Fluency.Execution.Exceptions
  commentId: N:Fluency.Execution.Exceptions
  name: Fluency.Execution.Exceptions
  nameWithType: Fluency.Execution.Exceptions
  fullName: Fluency.Execution.Exceptions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Fluency.Execution.Exceptions.ExecutionException.#ctor*
  commentId: Overload:Fluency.Execution.Exceptions.ExecutionException.#ctor
  name: ExecutionException
  nameWithType: ExecutionException.ExecutionException
  fullName: Fluency.Execution.Exceptions.ExecutionException.ExecutionException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
