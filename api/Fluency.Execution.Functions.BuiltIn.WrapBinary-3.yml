### YamlMime:ManagedReference
items:
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3
  commentId: T:Fluency.Execution.Functions.BuiltIn.WrapBinary`3
  id: WrapBinary`3
  parent: Fluency.Execution.Functions.BuiltIn
  children:
  - Fluency.Execution.Functions.BuiltIn.WrapBinary`3.#ctor(Func{`0,`1,`2},FluencyType,FluencyType,System.String,Fluency.Execution.Functions.Value[])
  - Fluency.Execution.Functions.BuiltIn.WrapBinary`3.BottomInput
  - Fluency.Execution.Functions.BuiltIn.WrapBinary`3.Name
  - Fluency.Execution.Functions.BuiltIn.WrapBinary`3.Top
  - Fluency.Execution.Functions.BuiltIn.WrapBinary`3.TopInput
  langs:
  - csharp
  - vb
  name: WrapBinary<TRealTop, TRealBottom, TRealOut>
  nameWithType: WrapBinary<TRealTop, TRealBottom, TRealOut>
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary<TRealTop, TRealBottom, TRealOut>
  type: Class
  source:
    id: WrapBinary
    path: ''
    startLine: 1451
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Functions.BuiltIn
  summary: "\nWrap a C# function that takes two arguments and returns one value as a Fluency function that:\n- If no arguments given, read something from the top and the bottom and do the operation on them.\n- If one argument given, read something from the top and do the operation with that and the argument.\nThis is how Add, Mult, Equals, And, Or, AddDouble, and Concat are implemented.\n"
  example: []
  syntax:
    content: 'public class WrapBinary<TRealTop, TRealBottom, TRealOut> : ITopIn, IBottomIn, ITopOut, IFunction'
    typeParameters:
    - id: TRealTop
    - id: TRealBottom
    - id: TRealOut
    content.vb: >-
      Public Class WrapBinary(Of TRealTop, TRealBottom, TRealOut)
          Implements ITopIn, IBottomIn, ITopOut, IFunction
  inheritance:
  - System.Object
  implements:
  - Fluency.Execution.Functions.ITopIn
  - Fluency.Execution.Functions.IBottomIn
  - Fluency.Execution.Functions.ITopOut
  - Fluency.Execution.Functions.IFunction
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: WrapBinary(Of TRealTop, TRealBottom, TRealOut)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinary(Of TRealTop, TRealBottom, TRealOut)
  name.vb: WrapBinary(Of TRealTop, TRealBottom, TRealOut)
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3.Name
  commentId: P:Fluency.Execution.Functions.BuiltIn.WrapBinary`3.Name
  id: Name
  parent: Fluency.Execution.Functions.BuiltIn.WrapBinary`3
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: WrapBinary<TRealTop, TRealBottom, TRealOut>.Name
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary<TRealTop, TRealBottom, TRealOut>.Name
  type: Property
  source:
    id: Name
    path: ''
    startLine: 1457
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Functions.BuiltIn
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Fluency.Execution.Functions.BuiltIn.WrapBinary`3.Name*
  implements:
  - Fluency.Execution.Functions.IFunction.Name
  nameWithType.vb: WrapBinary(Of TRealTop, TRealBottom, TRealOut).Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinary(Of TRealTop, TRealBottom, TRealOut).Name
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3.TopInput
  commentId: P:Fluency.Execution.Functions.BuiltIn.WrapBinary`3.TopInput
  id: TopInput
  parent: Fluency.Execution.Functions.BuiltIn.WrapBinary`3
  langs:
  - csharp
  - vb
  name: TopInput
  nameWithType: WrapBinary<TRealTop, TRealBottom, TRealOut>.TopInput
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary<TRealTop, TRealBottom, TRealOut>.TopInput
  type: Property
  source:
    id: TopInput
    path: ''
    startLine: 1459
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Functions.BuiltIn
  syntax:
    content: public GetNext TopInput { set; }
    parameters: []
    return:
      type: Fluency.Execution.Functions.GetNext
    content.vb: Public WriteOnly Property TopInput As GetNext
  overload: Fluency.Execution.Functions.BuiltIn.WrapBinary`3.TopInput*
  implements:
  - Fluency.Execution.Functions.ITopIn.TopInput
  nameWithType.vb: WrapBinary(Of TRealTop, TRealBottom, TRealOut).TopInput
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinary(Of TRealTop, TRealBottom, TRealOut).TopInput
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3.BottomInput
  commentId: P:Fluency.Execution.Functions.BuiltIn.WrapBinary`3.BottomInput
  id: BottomInput
  parent: Fluency.Execution.Functions.BuiltIn.WrapBinary`3
  langs:
  - csharp
  - vb
  name: BottomInput
  nameWithType: WrapBinary<TRealTop, TRealBottom, TRealOut>.BottomInput
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary<TRealTop, TRealBottom, TRealOut>.BottomInput
  type: Property
  source:
    id: BottomInput
    path: ''
    startLine: 1460
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Functions.BuiltIn
  syntax:
    content: public GetNext BottomInput { set; }
    parameters: []
    return:
      type: Fluency.Execution.Functions.GetNext
    content.vb: Public WriteOnly Property BottomInput As GetNext
  overload: Fluency.Execution.Functions.BuiltIn.WrapBinary`3.BottomInput*
  implements:
  - Fluency.Execution.Functions.IBottomIn.BottomInput
  nameWithType.vb: WrapBinary(Of TRealTop, TRealBottom, TRealOut).BottomInput
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinary(Of TRealTop, TRealBottom, TRealOut).BottomInput
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3.#ctor(Func{`0,`1,`2},FluencyType,FluencyType,System.String,Fluency.Execution.Functions.Value[])
  commentId: M:Fluency.Execution.Functions.BuiltIn.WrapBinary`3.#ctor(Func{`0,`1,`2},FluencyType,FluencyType,System.String,Fluency.Execution.Functions.Value[])
  id: '#ctor(Func{`0,`1,`2},FluencyType,FluencyType,System.String,Fluency.Execution.Functions.Value[])'
  parent: Fluency.Execution.Functions.BuiltIn.WrapBinary`3
  langs:
  - csharp
  - vb
  name: WrapBinary(Func<TRealTop, TRealBottom, TRealOut>, FluencyType, FluencyType, String, Value[])
  nameWithType: WrapBinary<TRealTop, TRealBottom, TRealOut>.WrapBinary(Func<TRealTop, TRealBottom, TRealOut>, FluencyType, FluencyType, String, Value[])
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary<TRealTop, TRealBottom, TRealOut>.WrapBinary(Func<TRealTop, TRealBottom, TRealOut>, FluencyType, FluencyType, System.String, Fluency.Execution.Functions.Value[])
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 1462
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Functions.BuiltIn
  syntax:
    content: public WrapBinary(Func<TRealTop, TRealBottom, TRealOut> function, FluencyType argType, FluencyType returnType, string name, Value[] arguments)
    parameters:
    - id: function
      type: Func{{TRealTop},{TRealBottom},{TRealOut}}
    - id: argType
      type: FluencyType
    - id: returnType
      type: FluencyType
    - id: name
      type: System.String
    - id: arguments
      type: Fluency.Execution.Functions.Value[]
    content.vb: Public Sub New(function As Func(Of TRealTop, TRealBottom, TRealOut), argType As FluencyType, returnType As FluencyType, name As String, arguments As Value())
  overload: Fluency.Execution.Functions.BuiltIn.WrapBinary`3.#ctor*
  nameWithType.vb: WrapBinary(Of TRealTop, TRealBottom, TRealOut).WrapBinary(Func(Of TRealTop, TRealBottom, TRealOut), FluencyType, FluencyType, String, Value())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinary(Of TRealTop, TRealBottom, TRealOut).WrapBinary(Func(Of TRealTop, TRealBottom, TRealOut), FluencyType, FluencyType, System.String, Fluency.Execution.Functions.Value())
  name.vb: WrapBinary(Func(Of TRealTop, TRealBottom, TRealOut), FluencyType, FluencyType, String, Value())
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3.Top
  commentId: M:Fluency.Execution.Functions.BuiltIn.WrapBinary`3.Top
  id: Top
  parent: Fluency.Execution.Functions.BuiltIn.WrapBinary`3
  langs:
  - csharp
  - vb
  name: Top()
  nameWithType: WrapBinary<TRealTop, TRealBottom, TRealOut>.Top()
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary<TRealTop, TRealBottom, TRealOut>.Top()
  type: Method
  source:
    id: Top
    path: ''
    startLine: 1481
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Functions.BuiltIn
  syntax:
    content: public Value Top()
    return:
      type: Fluency.Execution.Functions.Value
    content.vb: Public Function Top As Value
  overload: Fluency.Execution.Functions.BuiltIn.WrapBinary`3.Top*
  implements:
  - Fluency.Execution.Functions.ITopOut.Top
  nameWithType.vb: WrapBinary(Of TRealTop, TRealBottom, TRealOut).Top()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinary(Of TRealTop, TRealBottom, TRealOut).Top()
references:
- uid: Fluency.Execution.Functions.BuiltIn
  commentId: N:Fluency.Execution.Functions.BuiltIn
  name: Fluency.Execution.Functions.BuiltIn
  nameWithType: Fluency.Execution.Functions.BuiltIn
  fullName: Fluency.Execution.Functions.BuiltIn
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Fluency.Execution.Functions.ITopIn
  commentId: T:Fluency.Execution.Functions.ITopIn
  parent: Fluency.Execution.Functions
  name: ITopIn
  nameWithType: ITopIn
  fullName: Fluency.Execution.Functions.ITopIn
- uid: Fluency.Execution.Functions.IBottomIn
  commentId: T:Fluency.Execution.Functions.IBottomIn
  parent: Fluency.Execution.Functions
  name: IBottomIn
  nameWithType: IBottomIn
  fullName: Fluency.Execution.Functions.IBottomIn
- uid: Fluency.Execution.Functions.ITopOut
  commentId: T:Fluency.Execution.Functions.ITopOut
  parent: Fluency.Execution.Functions
  name: ITopOut
  nameWithType: ITopOut
  fullName: Fluency.Execution.Functions.ITopOut
- uid: Fluency.Execution.Functions.IFunction
  commentId: T:Fluency.Execution.Functions.IFunction
  parent: Fluency.Execution.Functions
  name: IFunction
  nameWithType: IFunction
  fullName: Fluency.Execution.Functions.IFunction
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Fluency.Execution.Functions
  commentId: N:Fluency.Execution.Functions
  name: Fluency.Execution.Functions
  nameWithType: Fluency.Execution.Functions
  fullName: Fluency.Execution.Functions
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3.Name*
  commentId: Overload:Fluency.Execution.Functions.BuiltIn.WrapBinary`3.Name
  name: Name
  nameWithType: WrapBinary<TRealTop, TRealBottom, TRealOut>.Name
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary<TRealTop, TRealBottom, TRealOut>.Name
  nameWithType.vb: WrapBinary(Of TRealTop, TRealBottom, TRealOut).Name
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinary(Of TRealTop, TRealBottom, TRealOut).Name
- uid: Fluency.Execution.Functions.IFunction.Name
  commentId: P:Fluency.Execution.Functions.IFunction.Name
  parent: Fluency.Execution.Functions.IFunction
  name: Name
  nameWithType: IFunction.Name
  fullName: Fluency.Execution.Functions.IFunction.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3.TopInput*
  commentId: Overload:Fluency.Execution.Functions.BuiltIn.WrapBinary`3.TopInput
  name: TopInput
  nameWithType: WrapBinary<TRealTop, TRealBottom, TRealOut>.TopInput
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary<TRealTop, TRealBottom, TRealOut>.TopInput
  nameWithType.vb: WrapBinary(Of TRealTop, TRealBottom, TRealOut).TopInput
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinary(Of TRealTop, TRealBottom, TRealOut).TopInput
- uid: Fluency.Execution.Functions.ITopIn.TopInput
  commentId: P:Fluency.Execution.Functions.ITopIn.TopInput
  parent: Fluency.Execution.Functions.ITopIn
  name: TopInput
  nameWithType: ITopIn.TopInput
  fullName: Fluency.Execution.Functions.ITopIn.TopInput
- uid: Fluency.Execution.Functions.GetNext
  commentId: T:Fluency.Execution.Functions.GetNext
  parent: Fluency.Execution.Functions
  name: GetNext
  nameWithType: GetNext
  fullName: Fluency.Execution.Functions.GetNext
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3.BottomInput*
  commentId: Overload:Fluency.Execution.Functions.BuiltIn.WrapBinary`3.BottomInput
  name: BottomInput
  nameWithType: WrapBinary<TRealTop, TRealBottom, TRealOut>.BottomInput
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary<TRealTop, TRealBottom, TRealOut>.BottomInput
  nameWithType.vb: WrapBinary(Of TRealTop, TRealBottom, TRealOut).BottomInput
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinary(Of TRealTop, TRealBottom, TRealOut).BottomInput
- uid: Fluency.Execution.Functions.IBottomIn.BottomInput
  commentId: P:Fluency.Execution.Functions.IBottomIn.BottomInput
  parent: Fluency.Execution.Functions.IBottomIn
  name: BottomInput
  nameWithType: IBottomIn.BottomInput
  fullName: Fluency.Execution.Functions.IBottomIn.BottomInput
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3.#ctor*
  commentId: Overload:Fluency.Execution.Functions.BuiltIn.WrapBinary`3.#ctor
  name: WrapBinary
  nameWithType: WrapBinary<TRealTop, TRealBottom, TRealOut>.WrapBinary
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary<TRealTop, TRealBottom, TRealOut>.WrapBinary
  nameWithType.vb: WrapBinary(Of TRealTop, TRealBottom, TRealOut).WrapBinary
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinary(Of TRealTop, TRealBottom, TRealOut).WrapBinary
- uid: Func{{TRealTop},{TRealBottom},{TRealOut}}
  commentId: '!:Func{`0,`1,`2}'
  definition: Func`3
  name: Func<TRealTop, TRealBottom, TRealOut>
  nameWithType: Func<TRealTop, TRealBottom, TRealOut>
  fullName: Func<TRealTop, TRealBottom, TRealOut>
  nameWithType.vb: Func(Of TRealTop, TRealBottom, TRealOut)
  fullName.vb: Func(Of TRealTop, TRealBottom, TRealOut)
  name.vb: Func(Of TRealTop, TRealBottom, TRealOut)
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRealTop
    nameWithType: TRealTop
    fullName: TRealTop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealBottom
    nameWithType: TRealBottom
    fullName: TRealBottom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealOut
    nameWithType: TRealOut
    fullName: TRealOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRealTop
    nameWithType: TRealTop
    fullName: TRealTop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealBottom
    nameWithType: TRealBottom
    fullName: TRealBottom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealOut
    nameWithType: TRealOut
    fullName: TRealOut
  - name: )
    nameWithType: )
    fullName: )
- uid: FluencyType
  isExternal: true
  name: FluencyType
  nameWithType: FluencyType
  fullName: FluencyType
- uid: Fluency.Execution.Functions.Value[]
  isExternal: true
  name: Value[]
  nameWithType: Value[]
  fullName: Fluency.Execution.Functions.Value[]
  nameWithType.vb: Value()
  fullName.vb: Fluency.Execution.Functions.Value()
  name.vb: Value()
  spec.csharp:
  - uid: Fluency.Execution.Functions.Value
    name: Value
    nameWithType: Value
    fullName: Fluency.Execution.Functions.Value
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Fluency.Execution.Functions.Value
    name: Value
    nameWithType: Value
    fullName: Fluency.Execution.Functions.Value
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3.Top*
  commentId: Overload:Fluency.Execution.Functions.BuiltIn.WrapBinary`3.Top
  name: Top
  nameWithType: WrapBinary<TRealTop, TRealBottom, TRealOut>.Top
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary<TRealTop, TRealBottom, TRealOut>.Top
  nameWithType.vb: WrapBinary(Of TRealTop, TRealBottom, TRealOut).Top
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinary(Of TRealTop, TRealBottom, TRealOut).Top
- uid: Fluency.Execution.Functions.ITopOut.Top
  commentId: M:Fluency.Execution.Functions.ITopOut.Top
  parent: Fluency.Execution.Functions.ITopOut
  name: Top()
  nameWithType: ITopOut.Top()
  fullName: Fluency.Execution.Functions.ITopOut.Top()
  spec.csharp:
  - uid: Fluency.Execution.Functions.ITopOut.Top
    name: Top
    nameWithType: ITopOut.Top
    fullName: Fluency.Execution.Functions.ITopOut.Top
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Functions.ITopOut.Top
    name: Top
    nameWithType: ITopOut.Top
    fullName: Fluency.Execution.Functions.ITopOut.Top
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.Value
  commentId: T:Fluency.Execution.Functions.Value
  parent: Fluency.Execution.Functions
  name: Value
  nameWithType: Value
  fullName: Fluency.Execution.Functions.Value
