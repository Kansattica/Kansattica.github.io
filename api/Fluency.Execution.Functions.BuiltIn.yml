### YamlMime:ManagedReference
items:
- uid: Fluency.Execution.Functions.BuiltIn
  commentId: N:Fluency.Execution.Functions.BuiltIn
  id: Fluency.Execution.Functions.BuiltIn
  children:
  - Fluency.Execution.Functions.BuiltIn.Com
  - Fluency.Execution.Functions.BuiltIn.Comment
  - Fluency.Execution.Functions.BuiltIn.Const
  - Fluency.Execution.Functions.BuiltIn.Drain
  - Fluency.Execution.Functions.BuiltIn.Dup
  - Fluency.Execution.Functions.BuiltIn.Duplicate
  - Fluency.Execution.Functions.BuiltIn.First
  - Fluency.Execution.Functions.BuiltIn.FirstN
  - Fluency.Execution.Functions.BuiltIn.I
  - Fluency.Execution.Functions.BuiltIn.MergeBottom
  - Fluency.Execution.Functions.BuiltIn.MergeIf
  - Fluency.Execution.Functions.BuiltIn.MergeTop
  - Fluency.Execution.Functions.BuiltIn.SwitchIn
  - Fluency.Execution.Functions.BuiltIn.SwitchOut
  - Fluency.Execution.Functions.BuiltIn.Unzip
  - Fluency.Execution.Functions.BuiltIn.WrapBinary`3
  - Fluency.Execution.Functions.BuiltIn.WrapBinaryFold`1
  - Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3
  - Fluency.Execution.Functions.BuiltIn.WrapBinaryTwoOutputs`4
  - Fluency.Execution.Functions.BuiltIn.WrapUnary`2
  - Fluency.Execution.Functions.BuiltIn.Zip
  langs:
  - csharp
  - vb
  name: Fluency.Execution.Functions.BuiltIn
  nameWithType: Fluency.Execution.Functions.BuiltIn
  fullName: Fluency.Execution.Functions.BuiltIn
  type: Namespace
  assemblies:
  - cs.temp.dll
references:
- uid: Fluency.Execution.Functions.BuiltIn.Comment
  commentId: T:Fluency.Execution.Functions.BuiltIn.Comment
  parent: Fluency.Execution.Functions.BuiltIn
  name: Comment
  nameWithType: Comment
  fullName: Fluency.Execution.Functions.BuiltIn.Comment
- uid: Fluency.Execution.Functions.BuiltIn.Com
  commentId: T:Fluency.Execution.Functions.BuiltIn.Com
  name: Com
  nameWithType: Com
  fullName: Fluency.Execution.Functions.BuiltIn.Com
- uid: Fluency.Execution.Functions.BuiltIn.I
  commentId: T:Fluency.Execution.Functions.BuiltIn.I
  name: I
  nameWithType: I
  fullName: Fluency.Execution.Functions.BuiltIn.I
- uid: Fluency.Execution.Functions.BuiltIn.Const
  commentId: T:Fluency.Execution.Functions.BuiltIn.Const
  name: Const
  nameWithType: Const
  fullName: Fluency.Execution.Functions.BuiltIn.Const
- uid: Fluency.Execution.Functions.BuiltIn.Drain
  commentId: T:Fluency.Execution.Functions.BuiltIn.Drain
  name: Drain
  nameWithType: Drain
  fullName: Fluency.Execution.Functions.BuiltIn.Drain
- uid: Fluency.Execution.Functions.BuiltIn.Dup
  commentId: T:Fluency.Execution.Functions.BuiltIn.Dup
  parent: Fluency.Execution.Functions.BuiltIn
  name: Dup
  nameWithType: Dup
  fullName: Fluency.Execution.Functions.BuiltIn.Dup
- uid: Fluency.Execution.Functions.BuiltIn.Duplicate
  commentId: T:Fluency.Execution.Functions.BuiltIn.Duplicate
  name: Duplicate
  nameWithType: Duplicate
  fullName: Fluency.Execution.Functions.BuiltIn.Duplicate
- uid: Fluency.Execution.Functions.BuiltIn.FirstN
  commentId: T:Fluency.Execution.Functions.BuiltIn.FirstN
  parent: Fluency.Execution.Functions.BuiltIn
  name: FirstN
  nameWithType: FirstN
  fullName: Fluency.Execution.Functions.BuiltIn.FirstN
- uid: Fluency.Execution.Functions.BuiltIn.First
  commentId: T:Fluency.Execution.Functions.BuiltIn.First
  name: First
  nameWithType: First
  fullName: Fluency.Execution.Functions.BuiltIn.First
- uid: Fluency.Execution.Functions.BuiltIn.MergeIf
  commentId: T:Fluency.Execution.Functions.BuiltIn.MergeIf
  name: MergeIf
  nameWithType: MergeIf
  fullName: Fluency.Execution.Functions.BuiltIn.MergeIf
- uid: Fluency.Execution.Functions.BuiltIn.MergeTop
  commentId: T:Fluency.Execution.Functions.BuiltIn.MergeTop
  parent: Fluency.Execution.Functions.BuiltIn
  name: MergeTop
  nameWithType: MergeTop
  fullName: Fluency.Execution.Functions.BuiltIn.MergeTop
- uid: Fluency.Execution.Functions.BuiltIn.MergeBottom
  commentId: T:Fluency.Execution.Functions.BuiltIn.MergeBottom
  name: MergeBottom
  nameWithType: MergeBottom
  fullName: Fluency.Execution.Functions.BuiltIn.MergeBottom
- uid: Fluency.Execution.Functions.BuiltIn.SwitchIn
  commentId: T:Fluency.Execution.Functions.BuiltIn.SwitchIn
  name: SwitchIn
  nameWithType: SwitchIn
  fullName: Fluency.Execution.Functions.BuiltIn.SwitchIn
- uid: Fluency.Execution.Functions.BuiltIn.SwitchOut
  commentId: T:Fluency.Execution.Functions.BuiltIn.SwitchOut
  name: SwitchOut
  nameWithType: SwitchOut
  fullName: Fluency.Execution.Functions.BuiltIn.SwitchOut
- uid: Fluency.Execution.Functions.BuiltIn.Unzip
  commentId: T:Fluency.Execution.Functions.BuiltIn.Unzip
  name: Unzip
  nameWithType: Unzip
  fullName: Fluency.Execution.Functions.BuiltIn.Unzip
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3
  commentId: T:Fluency.Execution.Functions.BuiltIn.WrapBinary`3
  name: WrapBinary<TRealTop, TRealBottom, TRealOut>
  nameWithType: WrapBinary<TRealTop, TRealBottom, TRealOut>
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary<TRealTop, TRealBottom, TRealOut>
  nameWithType.vb: WrapBinary(Of TRealTop, TRealBottom, TRealOut)
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinary(Of TRealTop, TRealBottom, TRealOut)
  name.vb: WrapBinary(Of TRealTop, TRealBottom, TRealOut)
  spec.csharp:
  - uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3
    name: WrapBinary
    nameWithType: WrapBinary
    fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary
  - name: <
    nameWithType: <
    fullName: <
  - name: TRealTop
    nameWithType: TRealTop
    fullName: TRealTop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealBottom
    nameWithType: TRealBottom
    fullName: TRealBottom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealOut
    nameWithType: TRealOut
    fullName: TRealOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3
    name: WrapBinary
    nameWithType: WrapBinary
    fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRealTop
    nameWithType: TRealTop
    fullName: TRealTop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealBottom
    nameWithType: TRealBottom
    fullName: TRealBottom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealOut
    nameWithType: TRealOut
    fullName: TRealOut
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryFold`1
  commentId: T:Fluency.Execution.Functions.BuiltIn.WrapBinaryFold`1
  name: WrapBinaryFold<TReal>
  nameWithType: WrapBinaryFold<TReal>
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryFold<TReal>
  nameWithType.vb: WrapBinaryFold(Of TReal)
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinaryFold(Of TReal)
  name.vb: WrapBinaryFold(Of TReal)
  spec.csharp:
  - uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryFold`1
    name: WrapBinaryFold
    nameWithType: WrapBinaryFold
    fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryFold
  - name: <
    nameWithType: <
    fullName: <
  - name: TReal
    nameWithType: TReal
    fullName: TReal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryFold`1
    name: WrapBinaryFold
    nameWithType: WrapBinaryFold
    fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryFold
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReal
    nameWithType: TReal
    fullName: TReal
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3
  commentId: T:Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3
  name: WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>
  nameWithType: WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>
  nameWithType.vb: WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut)
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut)
  name.vb: WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut)
  spec.csharp:
  - uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3
    name: WrapBinaryStreamOutput
    nameWithType: WrapBinaryStreamOutput
    fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput
  - name: <
    nameWithType: <
    fullName: <
  - name: TRealTop
    nameWithType: TRealTop
    fullName: TRealTop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealBottom
    nameWithType: TRealBottom
    fullName: TRealBottom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealOut
    nameWithType: TRealOut
    fullName: TRealOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3
    name: WrapBinaryStreamOutput
    nameWithType: WrapBinaryStreamOutput
    fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRealTop
    nameWithType: TRealTop
    fullName: TRealTop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealBottom
    nameWithType: TRealBottom
    fullName: TRealBottom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealOut
    nameWithType: TRealOut
    fullName: TRealOut
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryTwoOutputs`4
  commentId: T:Fluency.Execution.Functions.BuiltIn.WrapBinaryTwoOutputs`4
  name: WrapBinaryTwoOutputs<TRealTop, TRealBottom, TRealTopOut, TRealBottomOut>
  nameWithType: WrapBinaryTwoOutputs<TRealTop, TRealBottom, TRealTopOut, TRealBottomOut>
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryTwoOutputs<TRealTop, TRealBottom, TRealTopOut, TRealBottomOut>
  nameWithType.vb: WrapBinaryTwoOutputs(Of TRealTop, TRealBottom, TRealTopOut, TRealBottomOut)
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinaryTwoOutputs(Of TRealTop, TRealBottom, TRealTopOut, TRealBottomOut)
  name.vb: WrapBinaryTwoOutputs(Of TRealTop, TRealBottom, TRealTopOut, TRealBottomOut)
  spec.csharp:
  - uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryTwoOutputs`4
    name: WrapBinaryTwoOutputs
    nameWithType: WrapBinaryTwoOutputs
    fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryTwoOutputs
  - name: <
    nameWithType: <
    fullName: <
  - name: TRealTop
    nameWithType: TRealTop
    fullName: TRealTop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealBottom
    nameWithType: TRealBottom
    fullName: TRealBottom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealTopOut
    nameWithType: TRealTopOut
    fullName: TRealTopOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealBottomOut
    nameWithType: TRealBottomOut
    fullName: TRealBottomOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryTwoOutputs`4
    name: WrapBinaryTwoOutputs
    nameWithType: WrapBinaryTwoOutputs
    fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryTwoOutputs
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRealTop
    nameWithType: TRealTop
    fullName: TRealTop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealBottom
    nameWithType: TRealBottom
    fullName: TRealBottom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealTopOut
    nameWithType: TRealTopOut
    fullName: TRealTopOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealBottomOut
    nameWithType: TRealBottomOut
    fullName: TRealBottomOut
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.BuiltIn.WrapUnary`2
  commentId: T:Fluency.Execution.Functions.BuiltIn.WrapUnary`2
  name: WrapUnary<TRealIn, TRealOut>
  nameWithType: WrapUnary<TRealIn, TRealOut>
  fullName: Fluency.Execution.Functions.BuiltIn.WrapUnary<TRealIn, TRealOut>
  nameWithType.vb: WrapUnary(Of TRealIn, TRealOut)
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapUnary(Of TRealIn, TRealOut)
  name.vb: WrapUnary(Of TRealIn, TRealOut)
  spec.csharp:
  - uid: Fluency.Execution.Functions.BuiltIn.WrapUnary`2
    name: WrapUnary
    nameWithType: WrapUnary
    fullName: Fluency.Execution.Functions.BuiltIn.WrapUnary
  - name: <
    nameWithType: <
    fullName: <
  - name: TRealIn
    nameWithType: TRealIn
    fullName: TRealIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealOut
    nameWithType: TRealOut
    fullName: TRealOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Fluency.Execution.Functions.BuiltIn.WrapUnary`2
    name: WrapUnary
    nameWithType: WrapUnary
    fullName: Fluency.Execution.Functions.BuiltIn.WrapUnary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRealIn
    nameWithType: TRealIn
    fullName: TRealIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealOut
    nameWithType: TRealOut
    fullName: TRealOut
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.BuiltIn.Zip
  commentId: T:Fluency.Execution.Functions.BuiltIn.Zip
  name: Zip
  nameWithType: Zip
  fullName: Fluency.Execution.Functions.BuiltIn.Zip
- uid: Fluency.Execution.Functions.BuiltIn
  commentId: N:Fluency.Execution.Functions.BuiltIn
  name: Fluency.Execution.Functions.BuiltIn
  nameWithType: Fluency.Execution.Functions.BuiltIn
  fullName: Fluency.Execution.Functions.BuiltIn
