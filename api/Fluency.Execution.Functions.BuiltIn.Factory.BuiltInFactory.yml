### YamlMime:ManagedReference
items:
- uid: Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory
  commentId: T:Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory
  id: BuiltInFactory
  parent: Fluency.Execution.Functions.BuiltIn.Factory
  children:
  - Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory.BuiltInFunctions
  - Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory.Resolve(System.String,Fluency.Execution.Functions.Value[])
  langs:
  - csharp
  - vb
  name: BuiltInFactory
  nameWithType: BuiltInFactory
  fullName: Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory
  type: Class
  source:
    id: BuiltInFactory
    path: ''
    startLine: 839
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Functions.BuiltIn.Factory
  syntax:
    content: 'public class BuiltInFactory : IFunctionResolver'
    content.vb: >-
      Public Class BuiltInFactory
          Implements IFunctionResolver
  inheritance:
  - System.Object
  implements:
  - Fluency.Execution.IFunctionResolver
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory.BuiltInFunctions
  commentId: F:Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory.BuiltInFunctions
  id: BuiltInFunctions
  parent: Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory
  langs:
  - csharp
  - vb
  name: BuiltInFunctions
  nameWithType: BuiltInFactory.BuiltInFunctions
  fullName: Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory.BuiltInFunctions
  type: Field
  source:
    id: BuiltInFunctions
    path: ''
    startLine: 846
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Functions.BuiltIn.Factory
  syntax:
    content: public static IReadOnlyDictionary<string, FunctionMaker> BuiltInFunctions
    return:
      type: IReadOnlyDictionary{System.String,Fluency.Execution.FunctionMaker}
    content.vb: Public Shared BuiltInFunctions As IReadOnlyDictionary(Of String, FunctionMaker)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory.Resolve(System.String,Fluency.Execution.Functions.Value[])
  commentId: M:Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory.Resolve(System.String,Fluency.Execution.Functions.Value[])
  id: Resolve(System.String,Fluency.Execution.Functions.Value[])
  parent: Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory
  langs:
  - csharp
  - vb
  name: Resolve(String, Value[])
  nameWithType: BuiltInFactory.Resolve(String, Value[])
  fullName: Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory.Resolve(System.String, Fluency.Execution.Functions.Value[])
  type: Method
  source:
    id: Resolve
    path: ''
    startLine: 886
  assemblies:
  - cs.temp.dll
  namespace: Fluency.Execution.Functions.BuiltIn.Factory
  syntax:
    content: public IFunction Resolve(string name, Value[] arguments)
    parameters:
    - id: name
      type: System.String
    - id: arguments
      type: Fluency.Execution.Functions.Value[]
    return:
      type: Fluency.Execution.Functions.IFunction
    content.vb: Public Function Resolve(name As String, arguments As Value()) As IFunction
  overload: Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory.Resolve*
  nameWithType.vb: BuiltInFactory.Resolve(String, Value())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory.Resolve(System.String, Fluency.Execution.Functions.Value())
  name.vb: Resolve(String, Value())
references:
- uid: Fluency.Execution.Functions.BuiltIn.Factory
  commentId: N:Fluency.Execution.Functions.BuiltIn.Factory
  name: Fluency.Execution.Functions.BuiltIn.Factory
  nameWithType: Fluency.Execution.Functions.BuiltIn.Factory
  fullName: Fluency.Execution.Functions.BuiltIn.Factory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Fluency.Execution.IFunctionResolver
  commentId: T:Fluency.Execution.IFunctionResolver
  parent: Fluency.Execution
  name: IFunctionResolver
  nameWithType: IFunctionResolver
  fullName: Fluency.Execution.IFunctionResolver
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Fluency.Execution
  commentId: N:Fluency.Execution
  name: Fluency.Execution
  nameWithType: Fluency.Execution
  fullName: Fluency.Execution
- uid: IReadOnlyDictionary{System.String,Fluency.Execution.FunctionMaker}
  commentId: '!:IReadOnlyDictionary{System.String,Fluency.Execution.FunctionMaker}'
  definition: IReadOnlyDictionary`2
  name: IReadOnlyDictionary<String, FunctionMaker>
  nameWithType: IReadOnlyDictionary<String, FunctionMaker>
  fullName: IReadOnlyDictionary<System.String, Fluency.Execution.FunctionMaker>
  nameWithType.vb: IReadOnlyDictionary(Of String, FunctionMaker)
  fullName.vb: IReadOnlyDictionary(Of System.String, Fluency.Execution.FunctionMaker)
  name.vb: IReadOnlyDictionary(Of String, FunctionMaker)
  spec.csharp:
  - uid: IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Fluency.Execution.FunctionMaker
    name: FunctionMaker
    nameWithType: FunctionMaker
    fullName: Fluency.Execution.FunctionMaker
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Fluency.Execution.FunctionMaker
    name: FunctionMaker
    nameWithType: FunctionMaker
    fullName: Fluency.Execution.FunctionMaker
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyDictionary`2
  commentId: '!:IReadOnlyDictionary`2'
  isExternal: true
  name: IReadOnlyDictionary<, >
  nameWithType: IReadOnlyDictionary<, >
  fullName: IReadOnlyDictionary<, >
  nameWithType.vb: IReadOnlyDictionary(Of , )
  fullName.vb: IReadOnlyDictionary(Of , )
  name.vb: IReadOnlyDictionary(Of , )
  spec.csharp:
  - uid: IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory.Resolve*
  commentId: Overload:Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory.Resolve
  name: Resolve
  nameWithType: BuiltInFactory.Resolve
  fullName: Fluency.Execution.Functions.BuiltIn.Factory.BuiltInFactory.Resolve
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Fluency.Execution.Functions.Value[]
  isExternal: true
  name: Value[]
  nameWithType: Value[]
  fullName: Fluency.Execution.Functions.Value[]
  nameWithType.vb: Value()
  fullName.vb: Fluency.Execution.Functions.Value()
  name.vb: Value()
  spec.csharp:
  - uid: Fluency.Execution.Functions.Value
    name: Value
    nameWithType: Value
    fullName: Fluency.Execution.Functions.Value
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Fluency.Execution.Functions.Value
    name: Value
    nameWithType: Value
    fullName: Fluency.Execution.Functions.Value
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Fluency.Execution.Functions.IFunction
  commentId: T:Fluency.Execution.Functions.IFunction
  parent: Fluency.Execution.Functions
  name: IFunction
  nameWithType: IFunction
  fullName: Fluency.Execution.Functions.IFunction
- uid: Fluency.Execution.Functions
  commentId: N:Fluency.Execution.Functions
  name: Fluency.Execution.Functions
  nameWithType: Fluency.Execution.Functions
  fullName: Fluency.Execution.Functions
