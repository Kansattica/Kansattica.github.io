### YamlMime:ManagedReference
items:
- uid: Fluency.Execution.Functions.ExecutableNode
  commentId: T:Fluency.Execution.Functions.ExecutableNode
  id: ExecutableNode
  parent: Fluency.Execution.Functions
  children:
  - Fluency.Execution.Functions.ExecutableNode.BottomAfter
  - Fluency.Execution.Functions.ExecutableNode.Function
  - Fluency.Execution.Functions.ExecutableNode.Tiebreaker
  - Fluency.Execution.Functions.ExecutableNode.TopAfter
  langs:
  - csharp
  - vb
  name: ExecutableNode
  nameWithType: ExecutableNode
  fullName: Fluency.Execution.Functions.ExecutableNode
  type: Class
  source:
    remote:
      path: Execution/Execution/Functions/ExecutableNode.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: ExecutableNode
    path: ../Execution/Execution/Functions/ExecutableNode.cs
    startLine: 6
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  syntax:
    content: public class ExecutableNode
    content.vb: Public Class ExecutableNode
  inheritance:
  - System.Object
  derivedClasses:
  - Fluency.Execution.Functions.ExecutableNode`1
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Fluency.Execution.Functions.ExecutableNode.Function
  commentId: P:Fluency.Execution.Functions.ExecutableNode.Function
  id: Function
  parent: Fluency.Execution.Functions.ExecutableNode
  langs:
  - csharp
  - vb
  name: Function
  nameWithType: ExecutableNode.Function
  fullName: Fluency.Execution.Functions.ExecutableNode.Function
  type: Property
  source:
    remote:
      path: Execution/Execution/Functions/ExecutableNode.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Function
    path: ../Execution/Execution/Functions/ExecutableNode.cs
    startLine: 8
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  syntax:
    content: public IFunction Function { get; set; }
    parameters: []
    return:
      type: Fluency.Execution.Functions.IFunction
    content.vb: Public Property Function As IFunction
  overload: Fluency.Execution.Functions.ExecutableNode.Function*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Fluency.Execution.Functions.ExecutableNode.TopAfter
  commentId: P:Fluency.Execution.Functions.ExecutableNode.TopAfter
  id: TopAfter
  parent: Fluency.Execution.Functions.ExecutableNode
  langs:
  - csharp
  - vb
  name: TopAfter
  nameWithType: ExecutableNode.TopAfter
  fullName: Fluency.Execution.Functions.ExecutableNode.TopAfter
  type: Property
  source:
    remote:
      path: Execution/Execution/Functions/ExecutableNode.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: TopAfter
    path: ../Execution/Execution/Functions/ExecutableNode.cs
    startLine: 10
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  syntax:
    content: public ExecutableNode<ITopIn> TopAfter { get; set; }
    parameters: []
    return:
      type: Fluency.Execution.Functions.ExecutableNode{Fluency.Execution.Functions.ITopIn}
    content.vb: Public Property TopAfter As ExecutableNode(Of ITopIn)
  overload: Fluency.Execution.Functions.ExecutableNode.TopAfter*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Fluency.Execution.Functions.ExecutableNode.BottomAfter
  commentId: P:Fluency.Execution.Functions.ExecutableNode.BottomAfter
  id: BottomAfter
  parent: Fluency.Execution.Functions.ExecutableNode
  langs:
  - csharp
  - vb
  name: BottomAfter
  nameWithType: ExecutableNode.BottomAfter
  fullName: Fluency.Execution.Functions.ExecutableNode.BottomAfter
  type: Property
  source:
    remote:
      path: Execution/Execution/Functions/ExecutableNode.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: BottomAfter
    path: ../Execution/Execution/Functions/ExecutableNode.cs
    startLine: 11
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  syntax:
    content: public ExecutableNode<ITopIn> BottomAfter { get; set; }
    parameters: []
    return:
      type: Fluency.Execution.Functions.ExecutableNode{Fluency.Execution.Functions.ITopIn}
    content.vb: Public Property BottomAfter As ExecutableNode(Of ITopIn)
  overload: Fluency.Execution.Functions.ExecutableNode.BottomAfter*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Fluency.Execution.Functions.ExecutableNode.Tiebreaker
  commentId: P:Fluency.Execution.Functions.ExecutableNode.Tiebreaker
  id: Tiebreaker
  parent: Fluency.Execution.Functions.ExecutableNode
  langs:
  - csharp
  - vb
  name: Tiebreaker
  nameWithType: ExecutableNode.Tiebreaker
  fullName: Fluency.Execution.Functions.ExecutableNode.Tiebreaker
  type: Property
  source:
    remote:
      path: Execution/Execution/Functions/ExecutableNode.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Tiebreaker
    path: ../Execution/Execution/Functions/ExecutableNode.cs
    startLine: 13
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  syntax:
    content: public int Tiebreaker { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Tiebreaker As Integer
  overload: Fluency.Execution.Functions.ExecutableNode.Tiebreaker*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Fluency.Execution.Functions
  commentId: N:Fluency.Execution.Functions
  name: Fluency.Execution.Functions
  nameWithType: Fluency.Execution.Functions
  fullName: Fluency.Execution.Functions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Fluency.Execution.Functions.ExecutableNode.Function*
  commentId: Overload:Fluency.Execution.Functions.ExecutableNode.Function
  name: Function
  nameWithType: ExecutableNode.Function
  fullName: Fluency.Execution.Functions.ExecutableNode.Function
- uid: Fluency.Execution.Functions.IFunction
  commentId: T:Fluency.Execution.Functions.IFunction
  parent: Fluency.Execution.Functions
  name: IFunction
  nameWithType: IFunction
  fullName: Fluency.Execution.Functions.IFunction
- uid: Fluency.Execution.Functions.ExecutableNode.TopAfter*
  commentId: Overload:Fluency.Execution.Functions.ExecutableNode.TopAfter
  name: TopAfter
  nameWithType: ExecutableNode.TopAfter
  fullName: Fluency.Execution.Functions.ExecutableNode.TopAfter
- uid: Fluency.Execution.Functions.ExecutableNode{Fluency.Execution.Functions.ITopIn}
  commentId: T:Fluency.Execution.Functions.ExecutableNode{Fluency.Execution.Functions.ITopIn}
  parent: Fluency.Execution.Functions
  definition: Fluency.Execution.Functions.ExecutableNode`1
  name: ExecutableNode<ITopIn>
  nameWithType: ExecutableNode<ITopIn>
  fullName: Fluency.Execution.Functions.ExecutableNode<Fluency.Execution.Functions.ITopIn>
  nameWithType.vb: ExecutableNode(Of ITopIn)
  fullName.vb: Fluency.Execution.Functions.ExecutableNode(Of Fluency.Execution.Functions.ITopIn)
  name.vb: ExecutableNode(Of ITopIn)
  spec.csharp:
  - uid: Fluency.Execution.Functions.ExecutableNode`1
    name: ExecutableNode
    nameWithType: ExecutableNode
    fullName: Fluency.Execution.Functions.ExecutableNode
  - name: <
    nameWithType: <
    fullName: <
  - uid: Fluency.Execution.Functions.ITopIn
    name: ITopIn
    nameWithType: ITopIn
    fullName: Fluency.Execution.Functions.ITopIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Fluency.Execution.Functions.ExecutableNode`1
    name: ExecutableNode
    nameWithType: ExecutableNode
    fullName: Fluency.Execution.Functions.ExecutableNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Fluency.Execution.Functions.ITopIn
    name: ITopIn
    nameWithType: ITopIn
    fullName: Fluency.Execution.Functions.ITopIn
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.ExecutableNode`1
  commentId: T:Fluency.Execution.Functions.ExecutableNode`1
  name: ExecutableNode<T>
  nameWithType: ExecutableNode<T>
  fullName: Fluency.Execution.Functions.ExecutableNode<T>
  nameWithType.vb: ExecutableNode(Of T)
  fullName.vb: Fluency.Execution.Functions.ExecutableNode(Of T)
  name.vb: ExecutableNode(Of T)
  spec.csharp:
  - uid: Fluency.Execution.Functions.ExecutableNode`1
    name: ExecutableNode
    nameWithType: ExecutableNode
    fullName: Fluency.Execution.Functions.ExecutableNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Fluency.Execution.Functions.ExecutableNode`1
    name: ExecutableNode
    nameWithType: ExecutableNode
    fullName: Fluency.Execution.Functions.ExecutableNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.ExecutableNode.BottomAfter*
  commentId: Overload:Fluency.Execution.Functions.ExecutableNode.BottomAfter
  name: BottomAfter
  nameWithType: ExecutableNode.BottomAfter
  fullName: Fluency.Execution.Functions.ExecutableNode.BottomAfter
- uid: Fluency.Execution.Functions.ExecutableNode.Tiebreaker*
  commentId: Overload:Fluency.Execution.Functions.ExecutableNode.Tiebreaker
  name: Tiebreaker
  nameWithType: ExecutableNode.Tiebreaker
  fullName: Fluency.Execution.Functions.ExecutableNode.Tiebreaker
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
