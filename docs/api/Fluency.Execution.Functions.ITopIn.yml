### YamlMime:ManagedReference
items:
- uid: Fluency.Execution.Functions.ITopIn
  commentId: T:Fluency.Execution.Functions.ITopIn
  id: ITopIn
  parent: Fluency.Execution.Functions
  children:
  - Fluency.Execution.Functions.ITopIn.TopInput
  langs:
  - csharp
  - vb
  name: ITopIn
  nameWithType: ITopIn
  fullName: Fluency.Execution.Functions.ITopIn
  type: Interface
  source:
    remote:
      path: Execution/Execution/Functions/IFunction.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: ITopIn
    path: ../Execution/Execution/Functions/IFunction.cs
    startLine: 41
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  summary: "\nA Fluency function that reads from the top input.\n"
  example: []
  syntax:
    content: 'public interface ITopIn : IFunction'
    content.vb: >-
      Public Interface ITopIn
          Inherits IFunction
  inheritedMembers:
  - Fluency.Execution.Functions.IFunction.Name
  extensionMethods:
  - Fluency.Execution.Functions.IFunction.Fluency.Execution.Extensions.ExecutionExtensions.Is``1(System.String)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Fluency.Execution.Functions.ITopIn.TopInput
  commentId: P:Fluency.Execution.Functions.ITopIn.TopInput
  id: TopInput
  parent: Fluency.Execution.Functions.ITopIn
  langs:
  - csharp
  - vb
  name: TopInput
  nameWithType: ITopIn.TopInput
  fullName: Fluency.Execution.Functions.ITopIn.TopInput
  type: Property
  source:
    remote:
      path: Execution/Execution/Functions/IFunction.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: TopInput
    path: ../Execution/Execution/Functions/IFunction.cs
    startLine: 46
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  summary: "\nA function to call when you want the next value from the top input.\n"
  example: []
  syntax:
    content: GetNext TopInput { set; }
    parameters: []
    return:
      type: Fluency.Execution.Functions.GetNext
    content.vb: WriteOnly Property TopInput As GetNext
  overload: Fluency.Execution.Functions.ITopIn.TopInput*
  modifiers.csharp:
  - set
  modifiers.vb:
  - WriteOnly
references:
- uid: Fluency.Execution.Functions
  commentId: N:Fluency.Execution.Functions
  name: Fluency.Execution.Functions
  nameWithType: Fluency.Execution.Functions
  fullName: Fluency.Execution.Functions
- uid: Fluency.Execution.Functions.IFunction.Name
  commentId: P:Fluency.Execution.Functions.IFunction.Name
  parent: Fluency.Execution.Functions.IFunction
  name: Name
  nameWithType: IFunction.Name
  fullName: Fluency.Execution.Functions.IFunction.Name
- uid: Fluency.Execution.Functions.IFunction.Fluency.Execution.Extensions.ExecutionExtensions.Is``1(System.String)
  commentId: M:Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
  parent: Fluency.Execution.Extensions.ExecutionExtensions
  definition: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
  name: Is<T>(String)
  nameWithType: ExecutionExtensions.Is<T>(String)
  fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is<T>(System.String)
  nameWithType.vb: ExecutionExtensions.Is(Of T)(String)
  fullName.vb: Fluency.Execution.Extensions.ExecutionExtensions.Is(Of T)(System.String)
  name.vb: Is(Of T)(String)
  spec.csharp:
  - uid: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(System.String)
    name: Is<T>
    nameWithType: ExecutionExtensions.Is<T>
    fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(System.String)
    name: Is(Of T)
    nameWithType: ExecutionExtensions.Is(Of T)
    fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.IFunction
  commentId: T:Fluency.Execution.Functions.IFunction
  parent: Fluency.Execution.Functions
  name: IFunction
  nameWithType: IFunction
  fullName: Fluency.Execution.Functions.IFunction
- uid: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
  commentId: M:Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
  isExternal: true
  name: Is<T>(IFunction, String)
  nameWithType: ExecutionExtensions.Is<T>(IFunction, String)
  fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is<T>(Fluency.Execution.Functions.IFunction, System.String)
  nameWithType.vb: ExecutionExtensions.Is(Of T)(IFunction, String)
  fullName.vb: Fluency.Execution.Extensions.ExecutionExtensions.Is(Of T)(Fluency.Execution.Functions.IFunction, System.String)
  name.vb: Is(Of T)(IFunction, String)
  spec.csharp:
  - uid: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
    name: Is<T>
    nameWithType: ExecutionExtensions.Is<T>
    fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Fluency.Execution.Functions.IFunction
    name: IFunction
    nameWithType: IFunction
    fullName: Fluency.Execution.Functions.IFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
    name: Is(Of T)
    nameWithType: ExecutionExtensions.Is(Of T)
    fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Fluency.Execution.Functions.IFunction
    name: IFunction
    nameWithType: IFunction
    fullName: Fluency.Execution.Functions.IFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Extensions.ExecutionExtensions
  commentId: T:Fluency.Execution.Extensions.ExecutionExtensions
  parent: Fluency.Execution.Extensions
  name: ExecutionExtensions
  nameWithType: ExecutionExtensions
  fullName: Fluency.Execution.Extensions.ExecutionExtensions
- uid: Fluency.Execution.Extensions
  commentId: N:Fluency.Execution.Extensions
  name: Fluency.Execution.Extensions
  nameWithType: Fluency.Execution.Extensions
  fullName: Fluency.Execution.Extensions
- uid: Fluency.Execution.Functions.ITopIn.TopInput*
  commentId: Overload:Fluency.Execution.Functions.ITopIn.TopInput
  name: TopInput
  nameWithType: ITopIn.TopInput
  fullName: Fluency.Execution.Functions.ITopIn.TopInput
- uid: Fluency.Execution.Functions.GetNext
  commentId: T:Fluency.Execution.Functions.GetNext
  parent: Fluency.Execution.Functions
  name: GetNext
  nameWithType: GetNext
  fullName: Fluency.Execution.Functions.GetNext
