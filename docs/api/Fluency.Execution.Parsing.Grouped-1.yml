### YamlMime:ManagedReference
items:
- uid: Fluency.Execution.Parsing.Grouped`1
  commentId: T:Fluency.Execution.Parsing.Grouped`1
  id: Grouped`1
  parent: Fluency.Execution.Parsing
  children:
  - Fluency.Execution.Parsing.Grouped`1.#ctor(System.Collections.Generic.List{`0},System.Int32,System.Int32)
  - Fluency.Execution.Parsing.Grouped`1.Indexes
  - Fluency.Execution.Parsing.Grouped`1.System#Collections#Generic#IEnumerable{TSource}#GetEnumerator
  - Fluency.Execution.Parsing.Grouped`1.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: Grouped<TSource>
  nameWithType: Grouped<TSource>
  fullName: Fluency.Execution.Parsing.Grouped<TSource>
  type: Class
  source:
    remote:
      path: Execution/Parsing/ParseExtensions.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Grouped
    path: ../Execution/Parsing/ParseExtensions.cs
    startLine: 206
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing
  summary: "\nRepresents a group of elements from <xref href=\"Fluency.Execution.Parsing.ParseExtensions.GroupUntil%60%601(System.Collections.Generic.IEnumerable%7b%60%600%7d%2cSystem.Func%7b%60%600%2cSystem.Boolean%7d%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Fluency.Execution.Parsing.ParseExtensions.GroupWhile%60%601(System.Collections.Generic.IEnumerable%7b%60%600%7d%2cSystem.Func%7b%60%600%2cSystem.Boolean%2cFluency.Execution.Parsing.GroupWhileAction%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class Grouped<TSource> : IEnumerable<TSource>, IEnumerable'
    typeParameters:
    - id: TSource
      description: ''
    content.vb: >-
      Public Class Grouped(Of TSource)
          Implements IEnumerable(Of TSource), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{{TSource}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Collections.Generic.IEnumerable{`0}.Fluency.Execution.Parsing.ParseExtensions.SkipBetween``1(System.Func{{TSource},System.Boolean},System.Func{{TSource},System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.Fluency.Execution.Parsing.ParseExtensions.MergeLastIf``1(System.Func{{TSource},System.Boolean},System.Func{{TSource},{TSource},{TSource}})
  - System.Collections.Generic.IEnumerable{`0}.Fluency.Execution.Parsing.ParseExtensions.GroupWhile``1(System.Func{{TSource},System.Boolean,Fluency.Execution.Parsing.GroupWhileAction})
  - System.Collections.Generic.IEnumerable{`0}.Fluency.Execution.Parsing.ParseExtensions.GroupUntil``1(System.Func{{TSource},System.Boolean},System.Boolean)
  nameWithType.vb: Grouped(Of TSource)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Fluency.Execution.Parsing.Grouped(Of TSource)
  name.vb: Grouped(Of TSource)
- uid: Fluency.Execution.Parsing.Grouped`1.Indexes
  commentId: P:Fluency.Execution.Parsing.Grouped`1.Indexes
  id: Indexes
  parent: Fluency.Execution.Parsing.Grouped`1
  langs:
  - csharp
  - vb
  name: Indexes
  nameWithType: Grouped<TSource>.Indexes
  fullName: Fluency.Execution.Parsing.Grouped<TSource>.Indexes
  type: Property
  source:
    remote:
      path: Execution/Parsing/ParseExtensions.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Indexes
    path: ../Execution/Parsing/ParseExtensions.cs
    startLine: 212
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing
  summary: "\nThe inclusive range of indexes this group was taken from.\n"
  example: []
  syntax:
    content: public Range Indexes { get; set; }
    parameters: []
    return:
      type: Fluency.Execution.Parsing.Entities.Range
      description: ''
    content.vb: Public Property Indexes As Range
  overload: Fluency.Execution.Parsing.Grouped`1.Indexes*
  nameWithType.vb: Grouped(Of TSource).Indexes
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Fluency.Execution.Parsing.Grouped(Of TSource).Indexes
- uid: Fluency.Execution.Parsing.Grouped`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Fluency.Execution.Parsing.Grouped`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Fluency.Execution.Parsing.Grouped`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: Grouped<TSource>.IEnumerable.GetEnumerator()
  fullName: Fluency.Execution.Parsing.Grouped<TSource>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Execution/Parsing/ParseExtensions.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../Execution/Parsing/ParseExtensions.cs
    startLine: 214
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Fluency.Execution.Parsing.Grouped`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Grouped(Of TSource).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Fluency.Execution.Parsing.Grouped(Of TSource).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Fluency.Execution.Parsing.Grouped`1.System#Collections#Generic#IEnumerable{TSource}#GetEnumerator
  commentId: M:Fluency.Execution.Parsing.Grouped`1.System#Collections#Generic#IEnumerable{TSource}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{TSource}#GetEnumerator
  isEii: true
  parent: Fluency.Execution.Parsing.Grouped`1
  langs:
  - csharp
  - vb
  name: IEnumerable<TSource>.GetEnumerator()
  nameWithType: Grouped<TSource>.IEnumerable<TSource>.GetEnumerator()
  fullName: Fluency.Execution.Parsing.Grouped<TSource>.System.Collections.Generic.IEnumerable<TSource>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Execution/Parsing/ParseExtensions.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: System.Collections.Generic.IEnumerable<TSource>.GetEnumerator
    path: ../Execution/Parsing/ParseExtensions.cs
    startLine: 218
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing
  syntax:
    content: IEnumerator<TSource> IEnumerable<TSource>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{TSource}}
    content.vb: Function System.Collections.Generic.IEnumerable<TSource>.GetEnumerator As IEnumerator(Of TSource) Implements IEnumerable(Of TSource).GetEnumerator
  overload: Fluency.Execution.Parsing.Grouped`1.System#Collections#Generic#IEnumerable{TSource}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{TSource}}.GetEnumerator
  nameWithType.vb: Grouped(Of TSource).System.Collections.Generic.IEnumerable<TSource>.GetEnumerator()
  fullName.vb: Fluency.Execution.Parsing.Grouped(Of TSource).System.Collections.Generic.IEnumerable<TSource>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<TSource>.GetEnumerator()
- uid: Fluency.Execution.Parsing.Grouped`1.#ctor(System.Collections.Generic.List{`0},System.Int32,System.Int32)
  commentId: M:Fluency.Execution.Parsing.Grouped`1.#ctor(System.Collections.Generic.List{`0},System.Int32,System.Int32)
  id: '#ctor(System.Collections.Generic.List{`0},System.Int32,System.Int32)'
  parent: Fluency.Execution.Parsing.Grouped`1
  langs:
  - csharp
  - vb
  name: Grouped(List<TSource>, Int32, Int32)
  nameWithType: Grouped<TSource>.Grouped(List<TSource>, Int32, Int32)
  fullName: Fluency.Execution.Parsing.Grouped<TSource>.Grouped(System.Collections.Generic.List<TSource>, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: Execution/Parsing/ParseExtensions.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: .ctor
    path: ../Execution/Parsing/ParseExtensions.cs
    startLine: 230
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing
  summary: "\nConstruct a new group.\n"
  example: []
  syntax:
    content: public Grouped(List<TSource> source, int startIndex, int endIndex)
    parameters:
    - id: source
      type: System.Collections.Generic.List{{TSource}}
      description: ''
    - id: startIndex
      type: System.Int32
      description: ''
    - id: endIndex
      type: System.Int32
      description: ''
    content.vb: Public Sub New(source As List(Of TSource), startIndex As Integer, endIndex As Integer)
  overload: Fluency.Execution.Parsing.Grouped`1.#ctor*
  nameWithType.vb: Grouped(Of TSource).Grouped(List(Of TSource), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Fluency.Execution.Parsing.Grouped(Of TSource).Grouped(System.Collections.Generic.List(Of TSource), System.Int32, System.Int32)
  name.vb: Grouped(List(Of TSource), Int32, Int32)
references:
- uid: Fluency.Execution.Parsing.ParseExtensions.GroupUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  commentId: M:Fluency.Execution.Parsing.ParseExtensions.GroupUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  isExternal: true
  name: GroupUntil<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>, Boolean)
  nameWithType: ParseExtensions.GroupUntil<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>, Boolean)
  fullName: Fluency.Execution.Parsing.ParseExtensions.GroupUntil<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>, System.Boolean)
  nameWithType.vb: ParseExtensions.GroupUntil(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean), Boolean)
  fullName.vb: Fluency.Execution.Parsing.ParseExtensions.GroupUntil(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean), System.Boolean)
  name.vb: GroupUntil(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean), Boolean)
  spec.csharp:
  - uid: Fluency.Execution.Parsing.ParseExtensions.GroupUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
    name: GroupUntil<TSource>
    nameWithType: ParseExtensions.GroupUntil<TSource>
    fullName: Fluency.Execution.Parsing.ParseExtensions.GroupUntil<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Parsing.ParseExtensions.GroupUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
    name: GroupUntil(Of TSource)
    nameWithType: ParseExtensions.GroupUntil(Of TSource)
    fullName: Fluency.Execution.Parsing.ParseExtensions.GroupUntil(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Parsing.ParseExtensions.GroupWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean,Fluency.Execution.Parsing.GroupWhileAction})
  commentId: M:Fluency.Execution.Parsing.ParseExtensions.GroupWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean,Fluency.Execution.Parsing.GroupWhileAction})
  isExternal: true
  name: GroupWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean, GroupWhileAction>)
  nameWithType: ParseExtensions.GroupWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean, GroupWhileAction>)
  fullName: Fluency.Execution.Parsing.ParseExtensions.GroupWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean, Fluency.Execution.Parsing.GroupWhileAction>)
  nameWithType.vb: ParseExtensions.GroupWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean, GroupWhileAction))
  fullName.vb: Fluency.Execution.Parsing.ParseExtensions.GroupWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean, Fluency.Execution.Parsing.GroupWhileAction))
  name.vb: GroupWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean, GroupWhileAction))
  spec.csharp:
  - uid: Fluency.Execution.Parsing.ParseExtensions.GroupWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean,Fluency.Execution.Parsing.GroupWhileAction})
    name: GroupWhile<TSource>
    nameWithType: ParseExtensions.GroupWhile<TSource>
    fullName: Fluency.Execution.Parsing.ParseExtensions.GroupWhile<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Fluency.Execution.Parsing.GroupWhileAction
    name: GroupWhileAction
    nameWithType: GroupWhileAction
    fullName: Fluency.Execution.Parsing.GroupWhileAction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Parsing.ParseExtensions.GroupWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean,Fluency.Execution.Parsing.GroupWhileAction})
    name: GroupWhile(Of TSource)
    nameWithType: ParseExtensions.GroupWhile(Of TSource)
    fullName: Fluency.Execution.Parsing.ParseExtensions.GroupWhile(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Fluency.Execution.Parsing.GroupWhileAction
    name: GroupWhileAction
    nameWithType: GroupWhileAction
    fullName: Fluency.Execution.Parsing.GroupWhileAction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Parsing
  commentId: N:Fluency.Execution.Parsing
  name: Fluency.Execution.Parsing
  nameWithType: Fluency.Execution.Parsing
  fullName: Fluency.Execution.Parsing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.Fluency.Execution.Parsing.ParseExtensions.SkipBetween``1(System.Func{{TSource},System.Boolean},System.Func{{TSource},System.Boolean})
  commentId: M:Fluency.Execution.Parsing.ParseExtensions.SkipBetween``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})
  parent: Fluency.Execution.Parsing.ParseExtensions
  definition: Fluency.Execution.Parsing.ParseExtensions.SkipBetween``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})
  name: SkipBetween<TSource>(Func<TSource, Boolean>, Func<TSource, Boolean>)
  nameWithType: ParseExtensions.SkipBetween<TSource>(Func<TSource, Boolean>, Func<TSource, Boolean>)
  fullName: Fluency.Execution.Parsing.ParseExtensions.SkipBetween<TSource>(System.Func<TSource, System.Boolean>, System.Func<TSource, System.Boolean>)
  nameWithType.vb: ParseExtensions.SkipBetween(Of TSource)(Func(Of TSource, Boolean), Func(Of TSource, Boolean))
  fullName.vb: Fluency.Execution.Parsing.ParseExtensions.SkipBetween(Of TSource)(System.Func(Of TSource, System.Boolean), System.Func(Of TSource, System.Boolean))
  name.vb: SkipBetween(Of TSource)(Func(Of TSource, Boolean), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: Fluency.Execution.Parsing.ParseExtensions.SkipBetween``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})
    name: SkipBetween<TSource>
    nameWithType: ParseExtensions.SkipBetween<TSource>
    fullName: Fluency.Execution.Parsing.ParseExtensions.SkipBetween<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Parsing.ParseExtensions.SkipBetween``1(System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})
    name: SkipBetween(Of TSource)
    nameWithType: ParseExtensions.SkipBetween(Of TSource)
    fullName: Fluency.Execution.Parsing.ParseExtensions.SkipBetween(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.Fluency.Execution.Parsing.ParseExtensions.MergeLastIf``1(System.Func{{TSource},System.Boolean},System.Func{{TSource},{TSource},{TSource}})
  commentId: M:Fluency.Execution.Parsing.ParseExtensions.MergeLastIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``0,``0})
  parent: Fluency.Execution.Parsing.ParseExtensions
  definition: Fluency.Execution.Parsing.ParseExtensions.MergeLastIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``0,``0})
  name: MergeLastIf<TSource>(Func<TSource, Boolean>, Func<TSource, TSource, TSource>)
  nameWithType: ParseExtensions.MergeLastIf<TSource>(Func<TSource, Boolean>, Func<TSource, TSource, TSource>)
  fullName: Fluency.Execution.Parsing.ParseExtensions.MergeLastIf<TSource>(System.Func<TSource, System.Boolean>, System.Func<TSource, TSource, TSource>)
  nameWithType.vb: ParseExtensions.MergeLastIf(Of TSource)(Func(Of TSource, Boolean), Func(Of TSource, TSource, TSource))
  fullName.vb: Fluency.Execution.Parsing.ParseExtensions.MergeLastIf(Of TSource)(System.Func(Of TSource, System.Boolean), System.Func(Of TSource, TSource, TSource))
  name.vb: MergeLastIf(Of TSource)(Func(Of TSource, Boolean), Func(Of TSource, TSource, TSource))
  spec.csharp:
  - uid: Fluency.Execution.Parsing.ParseExtensions.MergeLastIf``1(System.Func{``0,System.Boolean},System.Func{``0,``0,``0})
    name: MergeLastIf<TSource>
    nameWithType: ParseExtensions.MergeLastIf<TSource>
    fullName: Fluency.Execution.Parsing.ParseExtensions.MergeLastIf<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Parsing.ParseExtensions.MergeLastIf``1(System.Func{``0,System.Boolean},System.Func{``0,``0,``0})
    name: MergeLastIf(Of TSource)
    nameWithType: ParseExtensions.MergeLastIf(Of TSource)
    fullName: Fluency.Execution.Parsing.ParseExtensions.MergeLastIf(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.Fluency.Execution.Parsing.ParseExtensions.GroupWhile``1(System.Func{{TSource},System.Boolean,Fluency.Execution.Parsing.GroupWhileAction})
  commentId: M:Fluency.Execution.Parsing.ParseExtensions.GroupWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean,Fluency.Execution.Parsing.GroupWhileAction})
  parent: Fluency.Execution.Parsing.ParseExtensions
  definition: Fluency.Execution.Parsing.ParseExtensions.GroupWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean,Fluency.Execution.Parsing.GroupWhileAction})
  name: GroupWhile<TSource>(Func<TSource, Boolean, GroupWhileAction>)
  nameWithType: ParseExtensions.GroupWhile<TSource>(Func<TSource, Boolean, GroupWhileAction>)
  fullName: Fluency.Execution.Parsing.ParseExtensions.GroupWhile<TSource>(System.Func<TSource, System.Boolean, Fluency.Execution.Parsing.GroupWhileAction>)
  nameWithType.vb: ParseExtensions.GroupWhile(Of TSource)(Func(Of TSource, Boolean, GroupWhileAction))
  fullName.vb: Fluency.Execution.Parsing.ParseExtensions.GroupWhile(Of TSource)(System.Func(Of TSource, System.Boolean, Fluency.Execution.Parsing.GroupWhileAction))
  name.vb: GroupWhile(Of TSource)(Func(Of TSource, Boolean, GroupWhileAction))
  spec.csharp:
  - uid: Fluency.Execution.Parsing.ParseExtensions.GroupWhile``1(System.Func{``0,System.Boolean,Fluency.Execution.Parsing.GroupWhileAction})
    name: GroupWhile<TSource>
    nameWithType: ParseExtensions.GroupWhile<TSource>
    fullName: Fluency.Execution.Parsing.ParseExtensions.GroupWhile<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Fluency.Execution.Parsing.GroupWhileAction
    name: GroupWhileAction
    nameWithType: GroupWhileAction
    fullName: Fluency.Execution.Parsing.GroupWhileAction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Parsing.ParseExtensions.GroupWhile``1(System.Func{``0,System.Boolean,Fluency.Execution.Parsing.GroupWhileAction})
    name: GroupWhile(Of TSource)
    nameWithType: ParseExtensions.GroupWhile(Of TSource)
    fullName: Fluency.Execution.Parsing.ParseExtensions.GroupWhile(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Fluency.Execution.Parsing.GroupWhileAction
    name: GroupWhileAction
    nameWithType: GroupWhileAction
    fullName: Fluency.Execution.Parsing.GroupWhileAction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.Fluency.Execution.Parsing.ParseExtensions.GroupUntil``1(System.Func{{TSource},System.Boolean},System.Boolean)
  commentId: M:Fluency.Execution.Parsing.ParseExtensions.GroupUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  parent: Fluency.Execution.Parsing.ParseExtensions
  definition: Fluency.Execution.Parsing.ParseExtensions.GroupUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)
  name: GroupUntil<TSource>(Func<TSource, Boolean>, Boolean)
  nameWithType: ParseExtensions.GroupUntil<TSource>(Func<TSource, Boolean>, Boolean)
  fullName: Fluency.Execution.Parsing.ParseExtensions.GroupUntil<TSource>(System.Func<TSource, System.Boolean>, System.Boolean)
  nameWithType.vb: ParseExtensions.GroupUntil(Of TSource)(Func(Of TSource, Boolean), Boolean)
  fullName.vb: Fluency.Execution.Parsing.ParseExtensions.GroupUntil(Of TSource)(System.Func(Of TSource, System.Boolean), System.Boolean)
  name.vb: GroupUntil(Of TSource)(Func(Of TSource, Boolean), Boolean)
  spec.csharp:
  - uid: Fluency.Execution.Parsing.ParseExtensions.GroupUntil``1(System.Func{``0,System.Boolean},System.Boolean)
    name: GroupUntil<TSource>
    nameWithType: ParseExtensions.GroupUntil<TSource>
    fullName: Fluency.Execution.Parsing.ParseExtensions.GroupUntil<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Parsing.ParseExtensions.GroupUntil``1(System.Func{``0,System.Boolean},System.Boolean)
    name: GroupUntil(Of TSource)
    nameWithType: ParseExtensions.GroupUntil(Of TSource)
    fullName: Fluency.Execution.Parsing.ParseExtensions.GroupUntil(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Fluency.Execution.Parsing.ParseExtensions.SkipBetween``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})
  commentId: M:Fluency.Execution.Parsing.ParseExtensions.SkipBetween``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})
  isExternal: true
  name: SkipBetween<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>, Func<TSource, Boolean>)
  nameWithType: ParseExtensions.SkipBetween<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>, Func<TSource, Boolean>)
  fullName: Fluency.Execution.Parsing.ParseExtensions.SkipBetween<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>, System.Func<TSource, System.Boolean>)
  nameWithType.vb: ParseExtensions.SkipBetween(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean), Func(Of TSource, Boolean))
  fullName.vb: Fluency.Execution.Parsing.ParseExtensions.SkipBetween(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean), System.Func(Of TSource, System.Boolean))
  name.vb: SkipBetween(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: Fluency.Execution.Parsing.ParseExtensions.SkipBetween``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})
    name: SkipBetween<TSource>
    nameWithType: ParseExtensions.SkipBetween<TSource>
    fullName: Fluency.Execution.Parsing.ParseExtensions.SkipBetween<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Parsing.ParseExtensions.SkipBetween``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})
    name: SkipBetween(Of TSource)
    nameWithType: ParseExtensions.SkipBetween(Of TSource)
    fullName: Fluency.Execution.Parsing.ParseExtensions.SkipBetween(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Parsing.ParseExtensions
  commentId: T:Fluency.Execution.Parsing.ParseExtensions
  parent: Fluency.Execution.Parsing
  name: ParseExtensions
  nameWithType: ParseExtensions
  fullName: Fluency.Execution.Parsing.ParseExtensions
- uid: Fluency.Execution.Parsing.ParseExtensions.MergeLastIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``0,``0})
  commentId: M:Fluency.Execution.Parsing.ParseExtensions.MergeLastIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``0,``0})
  isExternal: true
  name: MergeLastIf<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>, Func<TSource, TSource, TSource>)
  nameWithType: ParseExtensions.MergeLastIf<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>, Func<TSource, TSource, TSource>)
  fullName: Fluency.Execution.Parsing.ParseExtensions.MergeLastIf<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>, System.Func<TSource, TSource, TSource>)
  nameWithType.vb: ParseExtensions.MergeLastIf(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean), Func(Of TSource, TSource, TSource))
  fullName.vb: Fluency.Execution.Parsing.ParseExtensions.MergeLastIf(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean), System.Func(Of TSource, TSource, TSource))
  name.vb: MergeLastIf(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean), Func(Of TSource, TSource, TSource))
  spec.csharp:
  - uid: Fluency.Execution.Parsing.ParseExtensions.MergeLastIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``0,``0})
    name: MergeLastIf<TSource>
    nameWithType: ParseExtensions.MergeLastIf<TSource>
    fullName: Fluency.Execution.Parsing.ParseExtensions.MergeLastIf<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Parsing.ParseExtensions.MergeLastIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``0,``0})
    name: MergeLastIf(Of TSource)
    nameWithType: ParseExtensions.MergeLastIf(Of TSource)
    fullName: Fluency.Execution.Parsing.ParseExtensions.MergeLastIf(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Parsing.Grouped`1.Indexes*
  commentId: Overload:Fluency.Execution.Parsing.Grouped`1.Indexes
  name: Indexes
  nameWithType: Grouped<TSource>.Indexes
  fullName: Fluency.Execution.Parsing.Grouped<TSource>.Indexes
  nameWithType.vb: Grouped(Of TSource).Indexes
  fullName.vb: Fluency.Execution.Parsing.Grouped(Of TSource).Indexes
- uid: Fluency.Execution.Parsing.Entities.Range
  commentId: T:Fluency.Execution.Parsing.Entities.Range
  parent: Fluency.Execution.Parsing.Entities
  name: Range
  nameWithType: Range
  fullName: Fluency.Execution.Parsing.Entities.Range
- uid: Fluency.Execution.Parsing.Entities
  commentId: N:Fluency.Execution.Parsing.Entities
  name: Fluency.Execution.Parsing.Entities
  nameWithType: Fluency.Execution.Parsing.Entities
  fullName: Fluency.Execution.Parsing.Entities
- uid: Fluency.Execution.Parsing.Grouped`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Fluency.Execution.Parsing.Grouped`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: Grouped<TSource>.IEnumerable.GetEnumerator
  fullName: Fluency.Execution.Parsing.Grouped<TSource>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Grouped(Of TSource).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: Fluency.Execution.Parsing.Grouped(Of TSource).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Fluency.Execution.Parsing.Grouped`1.System#Collections#Generic#IEnumerable{TSource}#GetEnumerator*
  commentId: Overload:Fluency.Execution.Parsing.Grouped`1.System#Collections#Generic#IEnumerable{TSource}#GetEnumerator
  name: IEnumerable<TSource>.GetEnumerator
  nameWithType: Grouped<TSource>.IEnumerable<TSource>.GetEnumerator
  fullName: Fluency.Execution.Parsing.Grouped<TSource>.System.Collections.Generic.IEnumerable<TSource>.GetEnumerator
  nameWithType.vb: Grouped(Of TSource).System.Collections.Generic.IEnumerable<TSource>.GetEnumerator
  fullName.vb: Fluency.Execution.Parsing.Grouped(Of TSource).System.Collections.Generic.IEnumerable<TSource>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<TSource>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{TSource}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TSource}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TSource>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TSource>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TSource).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<TSource>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TSource>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of TSource).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TSource).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TSource>
  nameWithType: IEnumerator<TSource>
  fullName: System.Collections.Generic.IEnumerator<TSource>
  nameWithType.vb: IEnumerator(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TSource)
  name.vb: IEnumerator(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Parsing.Grouped`1.#ctor*
  commentId: Overload:Fluency.Execution.Parsing.Grouped`1.#ctor
  name: Grouped
  nameWithType: Grouped<TSource>.Grouped
  fullName: Fluency.Execution.Parsing.Grouped<TSource>.Grouped
  nameWithType.vb: Grouped(Of TSource).Grouped
  fullName.vb: Fluency.Execution.Parsing.Grouped(Of TSource).Grouped
- uid: System.Collections.Generic.List{{TSource}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TSource>
  nameWithType: List<TSource>
  fullName: System.Collections.Generic.List<TSource>
  nameWithType.vb: List(Of TSource)
  fullName.vb: System.Collections.Generic.List(Of TSource)
  name.vb: List(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
