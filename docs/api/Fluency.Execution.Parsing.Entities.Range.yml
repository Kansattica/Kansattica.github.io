### YamlMime:ManagedReference
items:
- uid: Fluency.Execution.Parsing.Entities.Range
  commentId: T:Fluency.Execution.Parsing.Entities.Range
  id: Range
  parent: Fluency.Execution.Parsing.Entities
  children:
  - Fluency.Execution.Parsing.Entities.Range.#ctor(System.Int32,System.Int32)
  - Fluency.Execution.Parsing.Entities.Range.Contains(System.Int32)
  - Fluency.Execution.Parsing.Entities.Range.Equals(Fluency.Execution.Parsing.Entities.Range)
  - Fluency.Execution.Parsing.Entities.Range.Equals(System.Object)
  - Fluency.Execution.Parsing.Entities.Range.GetHashCode
  - Fluency.Execution.Parsing.Entities.Range.Max
  - Fluency.Execution.Parsing.Entities.Range.Min
  - Fluency.Execution.Parsing.Entities.Range.op_Equality(Fluency.Execution.Parsing.Entities.Range,Fluency.Execution.Parsing.Entities.Range)
  - Fluency.Execution.Parsing.Entities.Range.op_Implicit(System.ValueTuple{System.Int32,System.Int32})~Fluency.Execution.Parsing.Entities.Range
  - Fluency.Execution.Parsing.Entities.Range.op_Inequality(Fluency.Execution.Parsing.Entities.Range,Fluency.Execution.Parsing.Entities.Range)
  - Fluency.Execution.Parsing.Entities.Range.ToString
  langs:
  - csharp
  - vb
  name: Range
  nameWithType: Range
  fullName: Fluency.Execution.Parsing.Entities.Range
  type: Class
  source:
    remote:
      path: Execution/Parsing/Entities/Range.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Range
    path: ../Execution/Parsing/Entities/Range.cs
    startLine: 7
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nRepresents an inclusive range.\n"
  example: []
  syntax:
    content: 'public class Range : IEquatable<Range>'
    content.vb: >-
      Public Class Range
          Implements IEquatable(Of Range)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{Fluency.Execution.Parsing.Entities.Range}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Fluency.Execution.Parsing.Entities.Range.Min
  commentId: P:Fluency.Execution.Parsing.Entities.Range.Min
  id: Min
  parent: Fluency.Execution.Parsing.Entities.Range
  langs:
  - csharp
  - vb
  name: Min
  nameWithType: Range.Min
  fullName: Fluency.Execution.Parsing.Entities.Range.Min
  type: Property
  source:
    remote:
      path: Execution/Parsing/Entities/Range.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Min
    path: ../Execution/Parsing/Entities/Range.cs
    startLine: 13
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nThe lower bound.\n"
  example: []
  syntax:
    content: public int Min { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: ''
    content.vb: Public Property Min As Integer
  overload: Fluency.Execution.Parsing.Entities.Range.Min*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Fluency.Execution.Parsing.Entities.Range.Max
  commentId: P:Fluency.Execution.Parsing.Entities.Range.Max
  id: Max
  parent: Fluency.Execution.Parsing.Entities.Range
  langs:
  - csharp
  - vb
  name: Max
  nameWithType: Range.Max
  fullName: Fluency.Execution.Parsing.Entities.Range.Max
  type: Property
  source:
    remote:
      path: Execution/Parsing/Entities/Range.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Max
    path: ../Execution/Parsing/Entities/Range.cs
    startLine: 19
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nThe upper bound.\n"
  example: []
  syntax:
    content: public int Max { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: ''
    content.vb: Public Property Max As Integer
  overload: Fluency.Execution.Parsing.Entities.Range.Max*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Fluency.Execution.Parsing.Entities.Range.#ctor(System.Int32,System.Int32)
  commentId: M:Fluency.Execution.Parsing.Entities.Range.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: Fluency.Execution.Parsing.Entities.Range
  langs:
  - csharp
  - vb
  name: Range(Int32, Int32)
  nameWithType: Range.Range(Int32, Int32)
  fullName: Fluency.Execution.Parsing.Entities.Range.Range(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: Execution/Parsing/Entities/Range.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: .ctor
    path: ../Execution/Parsing/Entities/Range.cs
    startLine: 27
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nCreate a new range from its inclusive bounds.\n"
  example: []
  syntax:
    content: public Range(int min, int max)
    parameters:
    - id: min
      type: System.Int32
      description: ''
    - id: max
      type: System.Int32
      description: ''
    content.vb: Public Sub New(min As Integer, max As Integer)
  overload: Fluency.Execution.Parsing.Entities.Range.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if min is greater than max.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Fluency.Execution.Parsing.Entities.Range.Contains(System.Int32)
  commentId: M:Fluency.Execution.Parsing.Entities.Range.Contains(System.Int32)
  id: Contains(System.Int32)
  parent: Fluency.Execution.Parsing.Entities.Range
  langs:
  - csharp
  - vb
  name: Contains(Int32)
  nameWithType: Range.Contains(Int32)
  fullName: Fluency.Execution.Parsing.Entities.Range.Contains(System.Int32)
  type: Method
  source:
    remote:
      path: Execution/Parsing/Entities/Range.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Contains
    path: ../Execution/Parsing/Entities/Range.cs
    startLine: 40
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nWhether n is inside the range.\n"
  example: []
  syntax:
    content: public bool Contains(int n)
    parameters:
    - id: n
      type: System.Int32
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function Contains(n As Integer) As Boolean
  overload: Fluency.Execution.Parsing.Entities.Range.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Fluency.Execution.Parsing.Entities.Range.Equals(Fluency.Execution.Parsing.Entities.Range)
  commentId: M:Fluency.Execution.Parsing.Entities.Range.Equals(Fluency.Execution.Parsing.Entities.Range)
  id: Equals(Fluency.Execution.Parsing.Entities.Range)
  parent: Fluency.Execution.Parsing.Entities.Range
  langs:
  - csharp
  - vb
  name: Equals(Range)
  nameWithType: Range.Equals(Range)
  fullName: Fluency.Execution.Parsing.Entities.Range.Equals(Fluency.Execution.Parsing.Entities.Range)
  type: Method
  source:
    remote:
      path: Execution/Parsing/Entities/Range.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Equals
    path: ../Execution/Parsing/Entities/Range.cs
    startLine: 47
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nTwo ranges are equal if they represent the same range- that is, they have the same minimum and maximum.\n"
  example: []
  syntax:
    content: public bool Equals(Range that)
    parameters:
    - id: that
      type: Fluency.Execution.Parsing.Entities.Range
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function Equals(that As Range) As Boolean
  overload: Fluency.Execution.Parsing.Entities.Range.Equals*
  implements:
  - System.IEquatable{Fluency.Execution.Parsing.Entities.Range}.Equals(Fluency.Execution.Parsing.Entities.Range)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Fluency.Execution.Parsing.Entities.Range.Equals(System.Object)
  commentId: M:Fluency.Execution.Parsing.Entities.Range.Equals(System.Object)
  id: Equals(System.Object)
  parent: Fluency.Execution.Parsing.Entities.Range
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Range.Equals(Object)
  fullName: Fluency.Execution.Parsing.Entities.Range.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Execution/Parsing/Entities/Range.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Equals
    path: ../Execution/Parsing/Entities/Range.cs
    startLine: 53
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nTwo ranges are equal if they represent the same range- that is, they have the same minimum and maximum.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Fluency.Execution.Parsing.Entities.Range.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Fluency.Execution.Parsing.Entities.Range.GetHashCode
  commentId: M:Fluency.Execution.Parsing.Entities.Range.GetHashCode
  id: GetHashCode
  parent: Fluency.Execution.Parsing.Entities.Range
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Range.GetHashCode()
  fullName: Fluency.Execution.Parsing.Entities.Range.GetHashCode()
  type: Method
  source:
    remote:
      path: Execution/Parsing/Entities/Range.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: GetHashCode
    path: ../Execution/Parsing/Entities/Range.cs
    startLine: 59
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nGets a hash code by xoring the min and max&apos;s hash codes.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: ''
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Fluency.Execution.Parsing.Entities.Range.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Fluency.Execution.Parsing.Entities.Range.op_Equality(Fluency.Execution.Parsing.Entities.Range,Fluency.Execution.Parsing.Entities.Range)
  commentId: M:Fluency.Execution.Parsing.Entities.Range.op_Equality(Fluency.Execution.Parsing.Entities.Range,Fluency.Execution.Parsing.Entities.Range)
  id: op_Equality(Fluency.Execution.Parsing.Entities.Range,Fluency.Execution.Parsing.Entities.Range)
  parent: Fluency.Execution.Parsing.Entities.Range
  langs:
  - csharp
  - vb
  name: Equality(Range, Range)
  nameWithType: Range.Equality(Range, Range)
  fullName: Fluency.Execution.Parsing.Entities.Range.Equality(Fluency.Execution.Parsing.Entities.Range, Fluency.Execution.Parsing.Entities.Range)
  type: Operator
  source:
    remote:
      path: Execution/Parsing/Entities/Range.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: op_Equality
    path: ../Execution/Parsing/Entities/Range.cs
    startLine: 65
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nTwo ranges are equal if they represent the same range- that is, they have the same minimum and maximum.\n"
  example: []
  syntax:
    content: public static bool operator ==(Range a, Range b)
    parameters:
    - id: a
      type: Fluency.Execution.Parsing.Entities.Range
    - id: b
      type: Fluency.Execution.Parsing.Entities.Range
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Operator =(a As Range, b As Range) As Boolean
  overload: Fluency.Execution.Parsing.Entities.Range.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Fluency.Execution.Parsing.Entities.Range.op_Inequality(Fluency.Execution.Parsing.Entities.Range,Fluency.Execution.Parsing.Entities.Range)
  commentId: M:Fluency.Execution.Parsing.Entities.Range.op_Inequality(Fluency.Execution.Parsing.Entities.Range,Fluency.Execution.Parsing.Entities.Range)
  id: op_Inequality(Fluency.Execution.Parsing.Entities.Range,Fluency.Execution.Parsing.Entities.Range)
  parent: Fluency.Execution.Parsing.Entities.Range
  langs:
  - csharp
  - vb
  name: Inequality(Range, Range)
  nameWithType: Range.Inequality(Range, Range)
  fullName: Fluency.Execution.Parsing.Entities.Range.Inequality(Fluency.Execution.Parsing.Entities.Range, Fluency.Execution.Parsing.Entities.Range)
  type: Operator
  source:
    remote:
      path: Execution/Parsing/Entities/Range.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: op_Inequality
    path: ../Execution/Parsing/Entities/Range.cs
    startLine: 75
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nTwo ranges are equal if and only if they represent the same range- that is, they have the same minimum and maximum.\n"
  example: []
  syntax:
    content: public static bool operator !=(Range a, Range b)
    parameters:
    - id: a
      type: Fluency.Execution.Parsing.Entities.Range
    - id: b
      type: Fluency.Execution.Parsing.Entities.Range
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Operator <>(a As Range, b As Range) As Boolean
  overload: Fluency.Execution.Parsing.Entities.Range.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Fluency.Execution.Parsing.Entities.Range.op_Implicit(System.ValueTuple{System.Int32,System.Int32})~Fluency.Execution.Parsing.Entities.Range
  commentId: M:Fluency.Execution.Parsing.Entities.Range.op_Implicit(System.ValueTuple{System.Int32,System.Int32})~Fluency.Execution.Parsing.Entities.Range
  id: op_Implicit(System.ValueTuple{System.Int32,System.Int32})~Fluency.Execution.Parsing.Entities.Range
  parent: Fluency.Execution.Parsing.Entities.Range
  langs:
  - csharp
  - vb
  name: Implicit((Int32, Int32) to Range)
  nameWithType: Range.Implicit((Int32, Int32) to Range)
  fullName: Fluency.Execution.Parsing.Entities.Range.Implicit(System.ValueTuple<System.Int32, System.Int32> to Fluency.Execution.Parsing.Entities.Range)
  type: Operator
  source:
    remote:
      path: Execution/Parsing/Entities/Range.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: op_Implicit
    path: ../Execution/Parsing/Entities/Range.cs
    startLine: 81
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nA Range can be implicitly constructed from a tuple of two ints. \n"
  example: []
  syntax:
    content: public static implicit operator Range((int, int)pair)
    parameters:
    - id: pair
      type: System.ValueTuple{System.Int32,System.Int32}
      description: ''
    return:
      type: Fluency.Execution.Parsing.Entities.Range
    content.vb: Public Shared Widening Operator CType(pair As(Integer, Integer)) As Range
  overload: Fluency.Execution.Parsing.Entities.Range.op_Implicit*
  nameWithType.vb: Range.Widening((Int32, Int32) to Range)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Fluency.Execution.Parsing.Entities.Range.Widening(System.ValueTuple(Of System.Int32, System.Int32) to Fluency.Execution.Parsing.Entities.Range)
  name.vb: Widening((Int32, Int32) to Range)
- uid: Fluency.Execution.Parsing.Entities.Range.ToString
  commentId: M:Fluency.Execution.Parsing.Entities.Range.ToString
  id: ToString
  parent: Fluency.Execution.Parsing.Entities.Range
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Range.ToString()
  fullName: Fluency.Execution.Parsing.Entities.Range.ToString()
  type: Method
  source:
    remote:
      path: Execution/Parsing/Entities/Range.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: ToString
    path: ../Execution/Parsing/Entities/Range.cs
    startLine: 87
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nReturns a nice string representation like (Min, Max)\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Fluency.Execution.Parsing.Entities.Range.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Fluency.Execution.Parsing.Entities
  commentId: N:Fluency.Execution.Parsing.Entities
  name: Fluency.Execution.Parsing.Entities
  nameWithType: Fluency.Execution.Parsing.Entities
  fullName: Fluency.Execution.Parsing.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{Fluency.Execution.Parsing.Entities.Range}
  commentId: T:System.IEquatable{Fluency.Execution.Parsing.Entities.Range}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Range>
  nameWithType: IEquatable<Range>
  fullName: System.IEquatable<Fluency.Execution.Parsing.Entities.Range>
  nameWithType.vb: IEquatable(Of Range)
  fullName.vb: System.IEquatable(Of Fluency.Execution.Parsing.Entities.Range)
  name.vb: IEquatable(Of Range)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Fluency.Execution.Parsing.Entities.Range
    name: Range
    nameWithType: Range
    fullName: Fluency.Execution.Parsing.Entities.Range
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Fluency.Execution.Parsing.Entities.Range
    name: Range
    nameWithType: Range
    fullName: Fluency.Execution.Parsing.Entities.Range
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Parsing.Entities.Range.Min*
  commentId: Overload:Fluency.Execution.Parsing.Entities.Range.Min
  name: Min
  nameWithType: Range.Min
  fullName: Fluency.Execution.Parsing.Entities.Range.Min
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Fluency.Execution.Parsing.Entities.Range.Max*
  commentId: Overload:Fluency.Execution.Parsing.Entities.Range.Max
  name: Max
  nameWithType: Range.Max
  fullName: Fluency.Execution.Parsing.Entities.Range.Max
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: Fluency.Execution.Parsing.Entities.Range.#ctor*
  commentId: Overload:Fluency.Execution.Parsing.Entities.Range.#ctor
  name: Range
  nameWithType: Range.Range
  fullName: Fluency.Execution.Parsing.Entities.Range.Range
- uid: Fluency.Execution.Parsing.Entities.Range.Contains*
  commentId: Overload:Fluency.Execution.Parsing.Entities.Range.Contains
  name: Contains
  nameWithType: Range.Contains
  fullName: Fluency.Execution.Parsing.Entities.Range.Contains
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Fluency.Execution.Parsing.Entities.Range.Equals*
  commentId: Overload:Fluency.Execution.Parsing.Entities.Range.Equals
  name: Equals
  nameWithType: Range.Equals
  fullName: Fluency.Execution.Parsing.Entities.Range.Equals
- uid: System.IEquatable{Fluency.Execution.Parsing.Entities.Range}.Equals(Fluency.Execution.Parsing.Entities.Range)
  commentId: M:System.IEquatable{Fluency.Execution.Parsing.Entities.Range}.Equals(Fluency.Execution.Parsing.Entities.Range)
  parent: System.IEquatable{Fluency.Execution.Parsing.Entities.Range}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Range)
  nameWithType: IEquatable<Range>.Equals(Range)
  fullName: System.IEquatable<Fluency.Execution.Parsing.Entities.Range>.Equals(Fluency.Execution.Parsing.Entities.Range)
  nameWithType.vb: IEquatable(Of Range).Equals(Range)
  fullName.vb: System.IEquatable(Of Fluency.Execution.Parsing.Entities.Range).Equals(Fluency.Execution.Parsing.Entities.Range)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Range>.Equals
    fullName: System.IEquatable<Fluency.Execution.Parsing.Entities.Range>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Fluency.Execution.Parsing.Entities.Range
    name: Range
    nameWithType: Range
    fullName: Fluency.Execution.Parsing.Entities.Range
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Range).Equals
    fullName: System.IEquatable(Of Fluency.Execution.Parsing.Entities.Range).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Fluency.Execution.Parsing.Entities.Range
    name: Range
    nameWithType: Range
    fullName: Fluency.Execution.Parsing.Entities.Range
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Parsing.Entities.Range
  commentId: T:Fluency.Execution.Parsing.Entities.Range
  parent: Fluency.Execution.Parsing.Entities
  name: Range
  nameWithType: Range
  fullName: Fluency.Execution.Parsing.Entities.Range
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Parsing.Entities.Range.GetHashCode*
  commentId: Overload:Fluency.Execution.Parsing.Entities.Range.GetHashCode
  name: GetHashCode
  nameWithType: Range.GetHashCode
  fullName: Fluency.Execution.Parsing.Entities.Range.GetHashCode
- uid: Fluency.Execution.Parsing.Entities.Range.op_Equality*
  commentId: Overload:Fluency.Execution.Parsing.Entities.Range.op_Equality
  name: Equality
  nameWithType: Range.Equality
  fullName: Fluency.Execution.Parsing.Entities.Range.Equality
- uid: Fluency.Execution.Parsing.Entities.Range.op_Inequality*
  commentId: Overload:Fluency.Execution.Parsing.Entities.Range.op_Inequality
  name: Inequality
  nameWithType: Range.Inequality
  fullName: Fluency.Execution.Parsing.Entities.Range.Inequality
- uid: Fluency.Execution.Parsing.Entities.Range.op_Implicit*
  commentId: Overload:Fluency.Execution.Parsing.Entities.Range.op_Implicit
  name: Implicit
  nameWithType: Range.Implicit
  fullName: Fluency.Execution.Parsing.Entities.Range.Implicit
  nameWithType.vb: Range.Widening
  fullName.vb: Fluency.Execution.Parsing.Entities.Range.Widening
  name.vb: Widening
- uid: System.ValueTuple{System.Int32,System.Int32}
  commentId: T:System.ValueTuple{System.Int32,System.Int32}
  parent: System
  isExternal: true
  name: ValueTuple<Int32, Int32>
  nameWithType: ValueTuple<Int32, Int32>
  fullName: System.ValueTuple<System.Int32, System.Int32>
  nameWithType.vb: ValueTuple(Of Int32, Int32)
  fullName.vb: System.ValueTuple(Of System.Int32, System.Int32)
  name.vb: ValueTuple(Of Int32, Int32)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Parsing.Entities.Range.ToString*
  commentId: Overload:Fluency.Execution.Parsing.Entities.Range.ToString
  name: ToString
  nameWithType: Range.ToString
  fullName: Fluency.Execution.Parsing.Entities.Range.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
