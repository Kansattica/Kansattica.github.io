### YamlMime:ManagedReference
items:
- uid: Fluency.Execution.Functions.IBottomOut
  commentId: T:Fluency.Execution.Functions.IBottomOut
  id: IBottomOut
  parent: Fluency.Execution.Functions
  children:
  - Fluency.Execution.Functions.IBottomOut.Bottom
  langs:
  - csharp
  - vb
  name: IBottomOut
  nameWithType: IBottomOut
  fullName: Fluency.Execution.Functions.IBottomOut
  type: Interface
  source:
    remote:
      path: Execution/Execution/Functions/IFunction.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: IBottomOut
    path: ../Execution/Execution/Functions/IFunction.cs
    startLine: 30
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  summary: "\nA Fluency function that writes to the bottom output.\n"
  example: []
  syntax:
    content: 'public interface IBottomOut : IFunction'
    content.vb: >-
      Public Interface IBottomOut
          Inherits IFunction
  inheritedMembers:
  - Fluency.Execution.Functions.IFunction.Name
  extensionMethods:
  - Fluency.Execution.Functions.IFunction.Fluency.Execution.Extensions.ExecutionExtensions.Is``1(System.String)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Fluency.Execution.Functions.IBottomOut.Bottom
  commentId: M:Fluency.Execution.Functions.IBottomOut.Bottom
  id: Bottom
  parent: Fluency.Execution.Functions.IBottomOut
  langs:
  - csharp
  - vb
  name: Bottom()
  nameWithType: IBottomOut.Bottom()
  fullName: Fluency.Execution.Functions.IBottomOut.Bottom()
  type: Method
  source:
    remote:
      path: Execution/Execution/Functions/IFunction.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Bottom
    path: ../Execution/Execution/Functions/IFunction.cs
    startLine: 35
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  summary: "\nCalled when the function after this one on the bottom wants a value.\n"
  example: []
  syntax:
    content: Value Bottom()
    return:
      type: Fluency.Execution.Functions.Value
    content.vb: Function Bottom As Value
  overload: Fluency.Execution.Functions.IBottomOut.Bottom*
references:
- uid: Fluency.Execution.Functions
  commentId: N:Fluency.Execution.Functions
  name: Fluency.Execution.Functions
  nameWithType: Fluency.Execution.Functions
  fullName: Fluency.Execution.Functions
- uid: Fluency.Execution.Functions.IFunction.Name
  commentId: P:Fluency.Execution.Functions.IFunction.Name
  parent: Fluency.Execution.Functions.IFunction
  name: Name
  nameWithType: IFunction.Name
  fullName: Fluency.Execution.Functions.IFunction.Name
- uid: Fluency.Execution.Functions.IFunction.Fluency.Execution.Extensions.ExecutionExtensions.Is``1(System.String)
  commentId: M:Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
  parent: Fluency.Execution.Extensions.ExecutionExtensions
  definition: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
  name: Is<T>(String)
  nameWithType: ExecutionExtensions.Is<T>(String)
  fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is<T>(System.String)
  nameWithType.vb: ExecutionExtensions.Is(Of T)(String)
  fullName.vb: Fluency.Execution.Extensions.ExecutionExtensions.Is(Of T)(System.String)
  name.vb: Is(Of T)(String)
  spec.csharp:
  - uid: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(System.String)
    name: Is<T>
    nameWithType: ExecutionExtensions.Is<T>
    fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(System.String)
    name: Is(Of T)
    nameWithType: ExecutionExtensions.Is(Of T)
    fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.IFunction
  commentId: T:Fluency.Execution.Functions.IFunction
  parent: Fluency.Execution.Functions
  name: IFunction
  nameWithType: IFunction
  fullName: Fluency.Execution.Functions.IFunction
- uid: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
  commentId: M:Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
  isExternal: true
  name: Is<T>(IFunction, String)
  nameWithType: ExecutionExtensions.Is<T>(IFunction, String)
  fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is<T>(Fluency.Execution.Functions.IFunction, System.String)
  nameWithType.vb: ExecutionExtensions.Is(Of T)(IFunction, String)
  fullName.vb: Fluency.Execution.Extensions.ExecutionExtensions.Is(Of T)(Fluency.Execution.Functions.IFunction, System.String)
  name.vb: Is(Of T)(IFunction, String)
  spec.csharp:
  - uid: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
    name: Is<T>
    nameWithType: ExecutionExtensions.Is<T>
    fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Fluency.Execution.Functions.IFunction
    name: IFunction
    nameWithType: IFunction
    fullName: Fluency.Execution.Functions.IFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
    name: Is(Of T)
    nameWithType: ExecutionExtensions.Is(Of T)
    fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Fluency.Execution.Functions.IFunction
    name: IFunction
    nameWithType: IFunction
    fullName: Fluency.Execution.Functions.IFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Extensions.ExecutionExtensions
  commentId: T:Fluency.Execution.Extensions.ExecutionExtensions
  parent: Fluency.Execution.Extensions
  name: ExecutionExtensions
  nameWithType: ExecutionExtensions
  fullName: Fluency.Execution.Extensions.ExecutionExtensions
- uid: Fluency.Execution.Extensions
  commentId: N:Fluency.Execution.Extensions
  name: Fluency.Execution.Extensions
  nameWithType: Fluency.Execution.Extensions
  fullName: Fluency.Execution.Extensions
- uid: Fluency.Execution.Functions.IBottomOut.Bottom*
  commentId: Overload:Fluency.Execution.Functions.IBottomOut.Bottom
  name: Bottom
  nameWithType: IBottomOut.Bottom
  fullName: Fluency.Execution.Functions.IBottomOut.Bottom
- uid: Fluency.Execution.Functions.Value
  commentId: T:Fluency.Execution.Functions.Value
  parent: Fluency.Execution.Functions
  name: Value
  nameWithType: Value
  fullName: Fluency.Execution.Functions.Value
