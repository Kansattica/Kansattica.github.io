### YamlMime:ManagedReference
items:
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3
  commentId: T:Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3
  id: WrapBinaryStreamOutput`3
  parent: Fluency.Execution.Functions.BuiltIn
  children:
  - Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.#ctor(System.Func{`0,`1,System.Collections.Generic.IEnumerable{`2}},Fluency.Common.FluencyType,Fluency.Common.FluencyType,System.String,Fluency.Execution.Functions.Value[])
  - Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.BottomInput
  - Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.Name
  - Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.Top
  - Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.TopInput
  langs:
  - csharp
  - vb
  name: WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>
  nameWithType: WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>
  type: Class
  source:
    remote:
      path: Execution/Execution/Functions/BuiltIn/WrapBinaryStreamOutput.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: WrapBinaryStreamOutput
    path: ../Execution/Execution/Functions/BuiltIn/WrapBinaryStreamOutput.cs
    startLine: 17
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions.BuiltIn
  summary: "\nWrap a C# function that takes two arguments and returns many values as a Fluency function.\nWorks just like <xref href=\"Fluency.Execution.Functions.BuiltIn.WrapBinary%603\" data-throw-if-not-resolved=\"false\"></xref>, except it wraps something that returns more than one value.\n- If no arguments given, read something from the top and the bottom and do the operation on them.\n- If one argument given, read something from the top and do the operation with that and the argument.\nThis is how Split is implemented.\n"
  example: []
  syntax:
    content: 'public class WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut> : ITopIn, IBottomIn, ITopOut, IFunction'
    typeParameters:
    - id: TRealTop
    - id: TRealBottom
    - id: TRealOut
    content.vb: >-
      Public Class WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut)
          Implements ITopIn, IBottomIn, ITopOut, IFunction
  inheritance:
  - System.Object
  implements:
  - Fluency.Execution.Functions.ITopIn
  - Fluency.Execution.Functions.IBottomIn
  - Fluency.Execution.Functions.ITopOut
  - Fluency.Execution.Functions.IFunction
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Fluency.Execution.Functions.IFunction.Fluency.Execution.Extensions.ExecutionExtensions.Is``1(System.String)
  nameWithType.vb: WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut)
  name.vb: WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut)
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.Name
  commentId: P:Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.Name
  id: Name
  parent: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.Name
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.Name
  type: Property
  source:
    remote:
      path: Execution/Execution/Functions/BuiltIn/WrapBinaryStreamOutput.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Name
    path: ../Execution/Execution/Functions/BuiltIn/WrapBinaryStreamOutput.cs
    startLine: 23
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions.BuiltIn
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.Name*
  implements:
  - Fluency.Execution.Functions.IFunction.Name
  nameWithType.vb: WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).Name
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.TopInput
  commentId: P:Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.TopInput
  id: TopInput
  parent: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3
  langs:
  - csharp
  - vb
  name: TopInput
  nameWithType: WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.TopInput
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.TopInput
  type: Property
  source:
    remote:
      path: Execution/Execution/Functions/BuiltIn/WrapBinaryStreamOutput.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: TopInput
    path: ../Execution/Execution/Functions/BuiltIn/WrapBinaryStreamOutput.cs
    startLine: 25
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions.BuiltIn
  syntax:
    content: public GetNext TopInput { set; }
    parameters: []
    return:
      type: Fluency.Execution.Functions.GetNext
    content.vb: Public WriteOnly Property TopInput As GetNext
  overload: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.TopInput*
  implements:
  - Fluency.Execution.Functions.ITopIn.TopInput
  nameWithType.vb: WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).TopInput
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).TopInput
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.BottomInput
  commentId: P:Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.BottomInput
  id: BottomInput
  parent: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3
  langs:
  - csharp
  - vb
  name: BottomInput
  nameWithType: WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.BottomInput
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.BottomInput
  type: Property
  source:
    remote:
      path: Execution/Execution/Functions/BuiltIn/WrapBinaryStreamOutput.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: BottomInput
    path: ../Execution/Execution/Functions/BuiltIn/WrapBinaryStreamOutput.cs
    startLine: 26
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions.BuiltIn
  syntax:
    content: public GetNext BottomInput { set; }
    parameters: []
    return:
      type: Fluency.Execution.Functions.GetNext
    content.vb: Public WriteOnly Property BottomInput As GetNext
  overload: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.BottomInput*
  implements:
  - Fluency.Execution.Functions.IBottomIn.BottomInput
  nameWithType.vb: WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).BottomInput
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).BottomInput
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.#ctor(System.Func{`0,`1,System.Collections.Generic.IEnumerable{`2}},Fluency.Common.FluencyType,Fluency.Common.FluencyType,System.String,Fluency.Execution.Functions.Value[])
  commentId: M:Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.#ctor(System.Func{`0,`1,System.Collections.Generic.IEnumerable{`2}},Fluency.Common.FluencyType,Fluency.Common.FluencyType,System.String,Fluency.Execution.Functions.Value[])
  id: '#ctor(System.Func{`0,`1,System.Collections.Generic.IEnumerable{`2}},Fluency.Common.FluencyType,Fluency.Common.FluencyType,System.String,Fluency.Execution.Functions.Value[])'
  parent: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3
  langs:
  - csharp
  - vb
  name: WrapBinaryStreamOutput(Func<TRealTop, TRealBottom, IEnumerable<TRealOut>>, FluencyType, FluencyType, String, Value[])
  nameWithType: WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.WrapBinaryStreamOutput(Func<TRealTop, TRealBottom, IEnumerable<TRealOut>>, FluencyType, FluencyType, String, Value[])
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.WrapBinaryStreamOutput(System.Func<TRealTop, TRealBottom, System.Collections.Generic.IEnumerable<TRealOut>>, Fluency.Common.FluencyType, Fluency.Common.FluencyType, System.String, Fluency.Execution.Functions.Value[])
  type: Constructor
  source:
    remote:
      path: Execution/Execution/Functions/BuiltIn/WrapBinaryStreamOutput.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: .ctor
    path: ../Execution/Execution/Functions/BuiltIn/WrapBinaryStreamOutput.cs
    startLine: 28
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions.BuiltIn
  syntax:
    content: public WrapBinaryStreamOutput(Func<TRealTop, TRealBottom, IEnumerable<TRealOut>> function, FluencyType returnType, FluencyType inputType, string name, Value[] arguments)
    parameters:
    - id: function
      type: System.Func{{TRealTop},{TRealBottom},System.Collections.Generic.IEnumerable{{TRealOut}}}
    - id: returnType
      type: Fluency.Common.FluencyType
    - id: inputType
      type: Fluency.Common.FluencyType
    - id: name
      type: System.String
    - id: arguments
      type: Fluency.Execution.Functions.Value[]
    content.vb: Public Sub New(function As Func(Of TRealTop, TRealBottom, IEnumerable(Of TRealOut)), returnType As FluencyType, inputType As FluencyType, name As String, arguments As Value())
  overload: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.#ctor*
  nameWithType.vb: WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).WrapBinaryStreamOutput(Func(Of TRealTop, TRealBottom, IEnumerable(Of TRealOut)), FluencyType, FluencyType, String, Value())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).WrapBinaryStreamOutput(System.Func(Of TRealTop, TRealBottom, System.Collections.Generic.IEnumerable(Of TRealOut)), Fluency.Common.FluencyType, Fluency.Common.FluencyType, System.String, Fluency.Execution.Functions.Value())
  name.vb: WrapBinaryStreamOutput(Func(Of TRealTop, TRealBottom, IEnumerable(Of TRealOut)), FluencyType, FluencyType, String, Value())
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.Top
  commentId: M:Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.Top
  id: Top
  parent: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3
  langs:
  - csharp
  - vb
  name: Top()
  nameWithType: WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.Top()
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.Top()
  type: Method
  source:
    remote:
      path: Execution/Execution/Functions/BuiltIn/WrapBinaryStreamOutput.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Top
    path: ../Execution/Execution/Functions/BuiltIn/WrapBinaryStreamOutput.cs
    startLine: 49
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions.BuiltIn
  syntax:
    content: public Value Top()
    return:
      type: Fluency.Execution.Functions.Value
    content.vb: Public Function Top As Value
  overload: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.Top*
  implements:
  - Fluency.Execution.Functions.ITopOut.Top
  nameWithType.vb: WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).Top()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).Top()
references:
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3
  commentId: T:Fluency.Execution.Functions.BuiltIn.WrapBinary`3
  name: WrapBinary<TRealTop, TRealBottom, TRealOut>
  nameWithType: WrapBinary<TRealTop, TRealBottom, TRealOut>
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary<TRealTop, TRealBottom, TRealOut>
  nameWithType.vb: WrapBinary(Of TRealTop, TRealBottom, TRealOut)
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinary(Of TRealTop, TRealBottom, TRealOut)
  name.vb: WrapBinary(Of TRealTop, TRealBottom, TRealOut)
  spec.csharp:
  - uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3
    name: WrapBinary
    nameWithType: WrapBinary
    fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary
  - name: <
    nameWithType: <
    fullName: <
  - name: TRealTop
    nameWithType: TRealTop
    fullName: TRealTop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealBottom
    nameWithType: TRealBottom
    fullName: TRealBottom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealOut
    nameWithType: TRealOut
    fullName: TRealOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Fluency.Execution.Functions.BuiltIn.WrapBinary`3
    name: WrapBinary
    nameWithType: WrapBinary
    fullName: Fluency.Execution.Functions.BuiltIn.WrapBinary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRealTop
    nameWithType: TRealTop
    fullName: TRealTop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealBottom
    nameWithType: TRealBottom
    fullName: TRealBottom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealOut
    nameWithType: TRealOut
    fullName: TRealOut
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.BuiltIn
  commentId: N:Fluency.Execution.Functions.BuiltIn
  name: Fluency.Execution.Functions.BuiltIn
  nameWithType: Fluency.Execution.Functions.BuiltIn
  fullName: Fluency.Execution.Functions.BuiltIn
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Fluency.Execution.Functions.ITopIn
  commentId: T:Fluency.Execution.Functions.ITopIn
  parent: Fluency.Execution.Functions
  name: ITopIn
  nameWithType: ITopIn
  fullName: Fluency.Execution.Functions.ITopIn
- uid: Fluency.Execution.Functions.IBottomIn
  commentId: T:Fluency.Execution.Functions.IBottomIn
  parent: Fluency.Execution.Functions
  name: IBottomIn
  nameWithType: IBottomIn
  fullName: Fluency.Execution.Functions.IBottomIn
- uid: Fluency.Execution.Functions.ITopOut
  commentId: T:Fluency.Execution.Functions.ITopOut
  parent: Fluency.Execution.Functions
  name: ITopOut
  nameWithType: ITopOut
  fullName: Fluency.Execution.Functions.ITopOut
- uid: Fluency.Execution.Functions.IFunction
  commentId: T:Fluency.Execution.Functions.IFunction
  parent: Fluency.Execution.Functions
  name: IFunction
  nameWithType: IFunction
  fullName: Fluency.Execution.Functions.IFunction
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.IFunction.Fluency.Execution.Extensions.ExecutionExtensions.Is``1(System.String)
  commentId: M:Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
  parent: Fluency.Execution.Extensions.ExecutionExtensions
  definition: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
  name: Is<T>(String)
  nameWithType: ExecutionExtensions.Is<T>(String)
  fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is<T>(System.String)
  nameWithType.vb: ExecutionExtensions.Is(Of T)(String)
  fullName.vb: Fluency.Execution.Extensions.ExecutionExtensions.Is(Of T)(System.String)
  name.vb: Is(Of T)(String)
  spec.csharp:
  - uid: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(System.String)
    name: Is<T>
    nameWithType: ExecutionExtensions.Is<T>
    fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(System.String)
    name: Is(Of T)
    nameWithType: ExecutionExtensions.Is(Of T)
    fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Fluency.Execution.Functions
  commentId: N:Fluency.Execution.Functions
  name: Fluency.Execution.Functions
  nameWithType: Fluency.Execution.Functions
  fullName: Fluency.Execution.Functions
- uid: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
  commentId: M:Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
  isExternal: true
  name: Is<T>(IFunction, String)
  nameWithType: ExecutionExtensions.Is<T>(IFunction, String)
  fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is<T>(Fluency.Execution.Functions.IFunction, System.String)
  nameWithType.vb: ExecutionExtensions.Is(Of T)(IFunction, String)
  fullName.vb: Fluency.Execution.Extensions.ExecutionExtensions.Is(Of T)(Fluency.Execution.Functions.IFunction, System.String)
  name.vb: Is(Of T)(IFunction, String)
  spec.csharp:
  - uid: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
    name: Is<T>
    nameWithType: ExecutionExtensions.Is<T>
    fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Fluency.Execution.Functions.IFunction
    name: IFunction
    nameWithType: IFunction
    fullName: Fluency.Execution.Functions.IFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
    name: Is(Of T)
    nameWithType: ExecutionExtensions.Is(Of T)
    fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Fluency.Execution.Functions.IFunction
    name: IFunction
    nameWithType: IFunction
    fullName: Fluency.Execution.Functions.IFunction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Extensions.ExecutionExtensions
  commentId: T:Fluency.Execution.Extensions.ExecutionExtensions
  parent: Fluency.Execution.Extensions
  name: ExecutionExtensions
  nameWithType: ExecutionExtensions
  fullName: Fluency.Execution.Extensions.ExecutionExtensions
- uid: Fluency.Execution.Extensions
  commentId: N:Fluency.Execution.Extensions
  name: Fluency.Execution.Extensions
  nameWithType: Fluency.Execution.Extensions
  fullName: Fluency.Execution.Extensions
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.Name*
  commentId: Overload:Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.Name
  name: Name
  nameWithType: WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.Name
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.Name
  nameWithType.vb: WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).Name
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).Name
- uid: Fluency.Execution.Functions.IFunction.Name
  commentId: P:Fluency.Execution.Functions.IFunction.Name
  parent: Fluency.Execution.Functions.IFunction
  name: Name
  nameWithType: IFunction.Name
  fullName: Fluency.Execution.Functions.IFunction.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.TopInput*
  commentId: Overload:Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.TopInput
  name: TopInput
  nameWithType: WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.TopInput
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.TopInput
  nameWithType.vb: WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).TopInput
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).TopInput
- uid: Fluency.Execution.Functions.ITopIn.TopInput
  commentId: P:Fluency.Execution.Functions.ITopIn.TopInput
  parent: Fluency.Execution.Functions.ITopIn
  name: TopInput
  nameWithType: ITopIn.TopInput
  fullName: Fluency.Execution.Functions.ITopIn.TopInput
- uid: Fluency.Execution.Functions.GetNext
  commentId: T:Fluency.Execution.Functions.GetNext
  parent: Fluency.Execution.Functions
  name: GetNext
  nameWithType: GetNext
  fullName: Fluency.Execution.Functions.GetNext
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.BottomInput*
  commentId: Overload:Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.BottomInput
  name: BottomInput
  nameWithType: WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.BottomInput
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.BottomInput
  nameWithType.vb: WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).BottomInput
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).BottomInput
- uid: Fluency.Execution.Functions.IBottomIn.BottomInput
  commentId: P:Fluency.Execution.Functions.IBottomIn.BottomInput
  parent: Fluency.Execution.Functions.IBottomIn
  name: BottomInput
  nameWithType: IBottomIn.BottomInput
  fullName: Fluency.Execution.Functions.IBottomIn.BottomInput
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.#ctor*
  commentId: Overload:Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.#ctor
  name: WrapBinaryStreamOutput
  nameWithType: WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.WrapBinaryStreamOutput
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.WrapBinaryStreamOutput
  nameWithType.vb: WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).WrapBinaryStreamOutput
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).WrapBinaryStreamOutput
- uid: System.Func{{TRealTop},{TRealBottom},System.Collections.Generic.IEnumerable{{TRealOut}}}
  commentId: T:System.Func{`0,`1,System.Collections.Generic.IEnumerable{`2}}
  parent: System
  definition: System.Func`3
  name: Func<TRealTop, TRealBottom, IEnumerable<TRealOut>>
  nameWithType: Func<TRealTop, TRealBottom, IEnumerable<TRealOut>>
  fullName: System.Func<TRealTop, TRealBottom, System.Collections.Generic.IEnumerable<TRealOut>>
  nameWithType.vb: Func(Of TRealTop, TRealBottom, IEnumerable(Of TRealOut))
  fullName.vb: System.Func(Of TRealTop, TRealBottom, System.Collections.Generic.IEnumerable(Of TRealOut))
  name.vb: Func(Of TRealTop, TRealBottom, IEnumerable(Of TRealOut))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRealTop
    nameWithType: TRealTop
    fullName: TRealTop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealBottom
    nameWithType: TRealBottom
    fullName: TRealBottom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRealOut
    nameWithType: TRealOut
    fullName: TRealOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRealTop
    nameWithType: TRealTop
    fullName: TRealTop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRealBottom
    nameWithType: TRealBottom
    fullName: TRealBottom
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRealOut
    nameWithType: TRealOut
    fullName: TRealOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Common.FluencyType
  commentId: T:Fluency.Common.FluencyType
  parent: Fluency.Common
  name: FluencyType
  nameWithType: FluencyType
  fullName: Fluency.Common.FluencyType
- uid: Fluency.Execution.Functions.Value[]
  isExternal: true
  name: Value[]
  nameWithType: Value[]
  fullName: Fluency.Execution.Functions.Value[]
  nameWithType.vb: Value()
  fullName.vb: Fluency.Execution.Functions.Value()
  name.vb: Value()
  spec.csharp:
  - uid: Fluency.Execution.Functions.Value
    name: Value
    nameWithType: Value
    fullName: Fluency.Execution.Functions.Value
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Fluency.Execution.Functions.Value
    name: Value
    nameWithType: Value
    fullName: Fluency.Execution.Functions.Value
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Common
  commentId: N:Fluency.Common
  name: Fluency.Common
  nameWithType: Fluency.Common
  fullName: Fluency.Common
- uid: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.Top*
  commentId: Overload:Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput`3.Top
  name: Top
  nameWithType: WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.Top
  fullName: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput<TRealTop, TRealBottom, TRealOut>.Top
  nameWithType.vb: WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).Top
  fullName.vb: Fluency.Execution.Functions.BuiltIn.WrapBinaryStreamOutput(Of TRealTop, TRealBottom, TRealOut).Top
- uid: Fluency.Execution.Functions.ITopOut.Top
  commentId: M:Fluency.Execution.Functions.ITopOut.Top
  parent: Fluency.Execution.Functions.ITopOut
  name: Top()
  nameWithType: ITopOut.Top()
  fullName: Fluency.Execution.Functions.ITopOut.Top()
  spec.csharp:
  - uid: Fluency.Execution.Functions.ITopOut.Top
    name: Top
    nameWithType: ITopOut.Top
    fullName: Fluency.Execution.Functions.ITopOut.Top
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Functions.ITopOut.Top
    name: Top
    nameWithType: ITopOut.Top
    fullName: Fluency.Execution.Functions.ITopOut.Top
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.Value
  commentId: T:Fluency.Execution.Functions.Value
  parent: Fluency.Execution.Functions
  name: Value
  nameWithType: Value
  fullName: Fluency.Execution.Functions.Value
