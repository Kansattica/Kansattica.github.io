### YamlMime:ManagedReference
items:
- uid: Fluency.Execution.Parsing.Entities.FunctionToken
  commentId: T:Fluency.Execution.Parsing.Entities.FunctionToken
  id: FunctionToken
  parent: Fluency.Execution.Parsing.Entities
  children:
  - Fluency.Execution.Parsing.Entities.FunctionToken.#ctor(System.String,System.Int32,System.Int32)
  - Fluency.Execution.Parsing.Entities.FunctionToken.Arguments
  - Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsBefore
  - Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsUpAfter
  - Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsUpBefore
  - Fluency.Execution.Parsing.Entities.FunctionToken.Line
  - Fluency.Execution.Parsing.Entities.FunctionToken.Name
  - Fluency.Execution.Parsing.Entities.FunctionToken.Original
  - Fluency.Execution.Parsing.Entities.FunctionToken.Range
  - Fluency.Execution.Parsing.Entities.FunctionToken.ToString
  langs:
  - csharp
  - vb
  name: FunctionToken
  nameWithType: FunctionToken
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken
  type: Class
  source:
    remote:
      path: Execution/Parsing/Entities/FunctionToken.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: FunctionToken
    path: ../Execution/Parsing/Entities/FunctionToken.cs
    startLine: 11
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nRepresents a parsed function from source control.\n"
  example: []
  syntax:
    content: public class FunctionToken
    content.vb: Public Class FunctionToken
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.Name
  commentId: P:Fluency.Execution.Parsing.Entities.FunctionToken.Name
  id: Name
  parent: Fluency.Execution.Parsing.Entities.FunctionToken
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: FunctionToken.Name
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.Name
  type: Property
  source:
    remote:
      path: Execution/Parsing/Entities/FunctionToken.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Name
    path: ../Execution/Parsing/Entities/FunctionToken.cs
    startLine: 17
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nThe function&apos;s name.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property Name As String
  overload: Fluency.Execution.Parsing.Entities.FunctionToken.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.Arguments
  commentId: P:Fluency.Execution.Parsing.Entities.FunctionToken.Arguments
  id: Arguments
  parent: Fluency.Execution.Parsing.Entities.FunctionToken
  langs:
  - csharp
  - vb
  name: Arguments
  nameWithType: FunctionToken.Arguments
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.Arguments
  type: Property
  source:
    remote:
      path: Execution/Parsing/Entities/FunctionToken.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Arguments
    path: ../Execution/Parsing/Entities/FunctionToken.cs
    startLine: 23
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nThe arguments the function takes.\n"
  example: []
  syntax:
    content: public Argument[] Arguments { get; }
    parameters: []
    return:
      type: Fluency.Execution.Parsing.Entities.Argument[]
      description: ''
    content.vb: Public ReadOnly Property Arguments As Argument()
  overload: Fluency.Execution.Parsing.Entities.FunctionToken.Arguments*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.Line
  commentId: P:Fluency.Execution.Parsing.Entities.FunctionToken.Line
  id: Line
  parent: Fluency.Execution.Parsing.Entities.FunctionToken
  langs:
  - csharp
  - vb
  name: Line
  nameWithType: FunctionToken.Line
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.Line
  type: Property
  source:
    remote:
      path: Execution/Parsing/Entities/FunctionToken.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Line
    path: ../Execution/Parsing/Entities/FunctionToken.cs
    startLine: 29
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nThe line number this function was on. Not available when constructed, has to be set from the outside for better metadata and error location.\n"
  example: []
  syntax:
    content: public int? Line { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
      description: ''
    content.vb: Public Property Line As Integer?
  overload: Fluency.Execution.Parsing.Entities.FunctionToken.Line*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.Range
  commentId: P:Fluency.Execution.Parsing.Entities.FunctionToken.Range
  id: Range
  parent: Fluency.Execution.Parsing.Entities.FunctionToken
  langs:
  - csharp
  - vb
  name: Range
  nameWithType: FunctionToken.Range
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.Range
  type: Property
  source:
    remote:
      path: Execution/Parsing/Entities/FunctionToken.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Range
    path: ../Execution/Parsing/Entities/FunctionToken.cs
    startLine: 35
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nThe inclusive range of indexes this was in its original line.\n"
  example: []
  syntax:
    content: public Range Range { get; }
    parameters: []
    return:
      type: Fluency.Execution.Parsing.Entities.Range
      description: ''
    content.vb: Public ReadOnly Property Range As Range
  overload: Fluency.Execution.Parsing.Entities.FunctionToken.Range*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.Original
  commentId: P:Fluency.Execution.Parsing.Entities.FunctionToken.Original
  id: Original
  parent: Fluency.Execution.Parsing.Entities.FunctionToken
  langs:
  - csharp
  - vb
  name: Original
  nameWithType: FunctionToken.Original
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.Original
  type: Property
  source:
    remote:
      path: Execution/Parsing/Entities/FunctionToken.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Original
    path: ../Execution/Parsing/Entities/FunctionToken.cs
    startLine: 41
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nWhat the function looked like before it got spaces, periods, and slashes trimmed.\n"
  example: []
  syntax:
    content: public string Original { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property Original As String
  overload: Fluency.Execution.Parsing.Entities.FunctionToken.Original*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsUpBefore
  commentId: P:Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsUpBefore
  id: ConnectsUpBefore
  parent: Fluency.Execution.Parsing.Entities.FunctionToken
  langs:
  - csharp
  - vb
  name: ConnectsUpBefore
  nameWithType: FunctionToken.ConnectsUpBefore
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsUpBefore
  type: Property
  source:
    remote:
      path: Execution/Parsing/Entities/FunctionToken.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: ConnectsUpBefore
    path: ../Execution/Parsing/Entities/FunctionToken.cs
    startLine: 47
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nWhether the function connects to the one above it for input (starts with \\.)\n"
  example: []
  syntax:
    content: public bool ConnectsUpBefore { get; }
    parameters: []
    return:
      type: System.Boolean
      description: ''
    content.vb: Public ReadOnly Property ConnectsUpBefore As Boolean
  overload: Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsUpBefore*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsBefore
  commentId: P:Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsBefore
  id: ConnectsBefore
  parent: Fluency.Execution.Parsing.Entities.FunctionToken
  langs:
  - csharp
  - vb
  name: ConnectsBefore
  nameWithType: FunctionToken.ConnectsBefore
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsBefore
  type: Property
  source:
    remote:
      path: Execution/Parsing/Entities/FunctionToken.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: ConnectsBefore
    path: ../Execution/Parsing/Entities/FunctionToken.cs
    startLine: 53
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nWhether the function connects to the one before it (starts with .)\n"
  example: []
  syntax:
    content: public bool ConnectsBefore { get; }
    parameters: []
    return:
      type: System.Boolean
      description: ''
    content.vb: Public ReadOnly Property ConnectsBefore As Boolean
  overload: Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsBefore*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsUpAfter
  commentId: P:Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsUpAfter
  id: ConnectsUpAfter
  parent: Fluency.Execution.Parsing.Entities.FunctionToken
  langs:
  - csharp
  - vb
  name: ConnectsUpAfter
  nameWithType: FunctionToken.ConnectsUpAfter
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsUpAfter
  type: Property
  source:
    remote:
      path: Execution/Parsing/Entities/FunctionToken.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: ConnectsUpAfter
    path: ../Execution/Parsing/Entities/FunctionToken.cs
    startLine: 59
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nWhether the function connects to the one above it for output (ends with ./)\n"
  example: []
  syntax:
    content: public bool ConnectsUpAfter { get; }
    parameters: []
    return:
      type: System.Boolean
      description: ''
    content.vb: Public ReadOnly Property ConnectsUpAfter As Boolean
  overload: Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsUpAfter*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.#ctor(System.String,System.Int32,System.Int32)
  commentId: M:Fluency.Execution.Parsing.Entities.FunctionToken.#ctor(System.String,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32)'
  parent: Fluency.Execution.Parsing.Entities.FunctionToken
  langs:
  - csharp
  - vb
  name: FunctionToken(String, Int32, Int32)
  nameWithType: FunctionToken.FunctionToken(String, Int32, Int32)
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.FunctionToken(System.String, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: Execution/Parsing/Entities/FunctionToken.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: .ctor
    path: ../Execution/Parsing/Entities/FunctionToken.cs
    startLine: 67
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nCreate a new function token.\n"
  example: []
  syntax:
    content: public FunctionToken(string toparse, int start, int end)
    parameters:
    - id: toparse
      type: System.String
      description: ''
    - id: start
      type: System.Int32
      description: The first index into the line containing this function.
    - id: end
      type: System.Int32
      description: The last index into the line containing this function.
    content.vb: Public Sub New(toparse As String, start As Integer, end As Integer)
  overload: Fluency.Execution.Parsing.Entities.FunctionToken.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.ToString
  commentId: M:Fluency.Execution.Parsing.Entities.FunctionToken.ToString
  id: ToString
  parent: Fluency.Execution.Parsing.Entities.FunctionToken
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: FunctionToken.ToString()
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.ToString()
  type: Method
  source:
    remote:
      path: Execution/Parsing/Entities/FunctionToken.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: ToString
    path: ../Execution/Parsing/Entities/FunctionToken.cs
    startLine: 125
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities
  summary: "\nPrettyprints some metadata about the function token.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Fluency.Execution.Parsing.Entities.FunctionToken.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Fluency.Execution.Parsing.Entities
  commentId: N:Fluency.Execution.Parsing.Entities
  name: Fluency.Execution.Parsing.Entities
  nameWithType: Fluency.Execution.Parsing.Entities
  fullName: Fluency.Execution.Parsing.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.Name*
  commentId: Overload:Fluency.Execution.Parsing.Entities.FunctionToken.Name
  name: Name
  nameWithType: FunctionToken.Name
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.Arguments*
  commentId: Overload:Fluency.Execution.Parsing.Entities.FunctionToken.Arguments
  name: Arguments
  nameWithType: FunctionToken.Arguments
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.Arguments
- uid: Fluency.Execution.Parsing.Entities.Argument[]
  isExternal: true
  name: Argument[]
  nameWithType: Argument[]
  fullName: Fluency.Execution.Parsing.Entities.Argument[]
  nameWithType.vb: Argument()
  fullName.vb: Fluency.Execution.Parsing.Entities.Argument()
  name.vb: Argument()
  spec.csharp:
  - uid: Fluency.Execution.Parsing.Entities.Argument
    name: Argument
    nameWithType: Argument
    fullName: Fluency.Execution.Parsing.Entities.Argument
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Fluency.Execution.Parsing.Entities.Argument
    name: Argument
    nameWithType: Argument
    fullName: Fluency.Execution.Parsing.Entities.Argument
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.Line*
  commentId: Overload:Fluency.Execution.Parsing.Entities.FunctionToken.Line
  name: Line
  nameWithType: FunctionToken.Line
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.Line
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.Range*
  commentId: Overload:Fluency.Execution.Parsing.Entities.FunctionToken.Range
  name: Range
  nameWithType: FunctionToken.Range
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.Range
- uid: Fluency.Execution.Parsing.Entities.Range
  commentId: T:Fluency.Execution.Parsing.Entities.Range
  parent: Fluency.Execution.Parsing.Entities
  name: Range
  nameWithType: Range
  fullName: Fluency.Execution.Parsing.Entities.Range
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.Original*
  commentId: Overload:Fluency.Execution.Parsing.Entities.FunctionToken.Original
  name: Original
  nameWithType: FunctionToken.Original
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.Original
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsUpBefore*
  commentId: Overload:Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsUpBefore
  name: ConnectsUpBefore
  nameWithType: FunctionToken.ConnectsUpBefore
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsUpBefore
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsBefore*
  commentId: Overload:Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsBefore
  name: ConnectsBefore
  nameWithType: FunctionToken.ConnectsBefore
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsBefore
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsUpAfter*
  commentId: Overload:Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsUpAfter
  name: ConnectsUpAfter
  nameWithType: FunctionToken.ConnectsUpAfter
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.ConnectsUpAfter
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.#ctor*
  commentId: Overload:Fluency.Execution.Parsing.Entities.FunctionToken.#ctor
  name: FunctionToken
  nameWithType: FunctionToken.FunctionToken
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.FunctionToken
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Parsing.Entities.FunctionToken.ToString*
  commentId: Overload:Fluency.Execution.Parsing.Entities.FunctionToken.ToString
  name: ToString
  nameWithType: FunctionToken.ToString
  fullName: Fluency.Execution.Parsing.Entities.FunctionToken.ToString
