### YamlMime:ManagedReference
items:
- uid: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph
  commentId: T:Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph
  id: FunctionGraph
  parent: Fluency.Execution.Parsing.Entities.FunctionGraph
  children:
  - Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Fluency.Execution.Parsing.Entities.FunctionToken}})
  - Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Arguments
  - Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Head
  - Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Name
  langs:
  - csharp
  - vb
  name: FunctionGraph
  nameWithType: FunctionGraph
  fullName: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph
  type: Class
  source:
    remote:
      path: Execution/Parsing/Entities/FunctionGraph/FunctionGraph.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: FunctionGraph
    path: ../Execution/Parsing/Entities/FunctionGraph/FunctionGraph.cs
    startLine: 10
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities.FunctionGraph
  summary: "\nRepresents a single user-defined function and all the functions that implement it.\n"
  example: []
  syntax:
    content: public class FunctionGraph
    content.vb: Public Class FunctionGraph
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Head
  commentId: P:Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Head
  id: Head
  parent: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph
  langs:
  - csharp
  - vb
  name: Head
  nameWithType: FunctionGraph.Head
  fullName: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Head
  type: Property
  source:
    remote:
      path: Execution/Parsing/Entities/FunctionGraph/FunctionGraph.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Head
    path: ../Execution/Parsing/Entities/FunctionGraph/FunctionGraph.cs
    startLine: 16
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities.FunctionGraph
  summary: "\nThe root node of the function. This is the Def() function.\n"
  example: []
  syntax:
    content: public FunctionNode Head { get; }
    parameters: []
    return:
      type: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionNode
      description: ''
    content.vb: Public ReadOnly Property Head As FunctionNode
  overload: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Head*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Name
  commentId: P:Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Name
  id: Name
  parent: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: FunctionGraph.Name
  fullName: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Name
  type: Property
  source:
    remote:
      path: Execution/Parsing/Entities/FunctionGraph/FunctionGraph.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Name
    path: ../Execution/Parsing/Entities/FunctionGraph/FunctionGraph.cs
    startLine: 22
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities.FunctionGraph
  summary: "\nName of the function this graph represents.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
      description: ''
    content.vb: Public ReadOnly Property Name As String
  overload: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Arguments
  commentId: P:Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Arguments
  id: Arguments
  parent: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph
  langs:
  - csharp
  - vb
  name: Arguments
  nameWithType: FunctionGraph.Arguments
  fullName: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Arguments
  type: Property
  source:
    remote:
      path: Execution/Parsing/Entities/FunctionGraph/FunctionGraph.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Arguments
    path: ../Execution/Parsing/Entities/FunctionGraph/FunctionGraph.cs
    startLine: 28
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities.FunctionGraph
  summary: "\nThe arguments this function has declared.\n"
  example: []
  syntax:
    content: public FunctionArg[] Arguments { get; }
    parameters: []
    return:
      type: Fluency.Execution.Parsing.Entities.ArgumentTypes.FunctionArg[]
      description: ''
    content.vb: Public ReadOnly Property Arguments As FunctionArg()
  overload: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Arguments*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Fluency.Execution.Parsing.Entities.FunctionToken}})
  commentId: M:Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Fluency.Execution.Parsing.Entities.FunctionToken}})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Fluency.Execution.Parsing.Entities.FunctionToken}})'
  parent: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph
  langs:
  - csharp
  - vb
  name: FunctionGraph(IEnumerable<IEnumerable<FunctionToken>>)
  nameWithType: FunctionGraph.FunctionGraph(IEnumerable<IEnumerable<FunctionToken>>)
  fullName: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.FunctionGraph(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<Fluency.Execution.Parsing.Entities.FunctionToken>>)
  type: Constructor
  source:
    remote:
      path: Execution/Parsing/Entities/FunctionGraph/FunctionGraph.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: .ctor
    path: ../Execution/Parsing/Entities/FunctionGraph/FunctionGraph.cs
    startLine: 34
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing.Entities.FunctionGraph
  summary: "\nCreate a new function graph. This takes an IEnumerable of tokenized lines (which are themselves IEnumerables of tokens).\n"
  example: []
  syntax:
    content: public FunctionGraph(IEnumerable<IEnumerable<FunctionToken>> tokens)
    parameters:
    - id: tokens
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Fluency.Execution.Parsing.Entities.FunctionToken}}
      description: ''
    content.vb: Public Sub New(tokens As IEnumerable(Of IEnumerable(Of FunctionToken)))
  overload: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.#ctor*
  nameWithType.vb: FunctionGraph.FunctionGraph(IEnumerable(Of IEnumerable(Of FunctionToken)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.FunctionGraph(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of Fluency.Execution.Parsing.Entities.FunctionToken)))
  name.vb: FunctionGraph(IEnumerable(Of IEnumerable(Of FunctionToken)))
references:
- uid: Fluency.Execution.Parsing.Entities.FunctionGraph
  commentId: N:Fluency.Execution.Parsing.Entities.FunctionGraph
  name: Fluency.Execution.Parsing.Entities.FunctionGraph
  nameWithType: Fluency.Execution.Parsing.Entities.FunctionGraph
  fullName: Fluency.Execution.Parsing.Entities.FunctionGraph
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Head*
  commentId: Overload:Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Head
  name: Head
  nameWithType: FunctionGraph.Head
  fullName: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Head
- uid: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionNode
  commentId: T:Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionNode
  parent: Fluency.Execution.Parsing.Entities.FunctionGraph
  name: FunctionNode
  nameWithType: FunctionNode
  fullName: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionNode
- uid: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Name*
  commentId: Overload:Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Name
  name: Name
  nameWithType: FunctionGraph.Name
  fullName: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Arguments*
  commentId: Overload:Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Arguments
  name: Arguments
  nameWithType: FunctionGraph.Arguments
  fullName: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.Arguments
- uid: Fluency.Execution.Parsing.Entities.ArgumentTypes.FunctionArg[]
  isExternal: true
  name: FunctionArg[]
  nameWithType: FunctionArg[]
  fullName: Fluency.Execution.Parsing.Entities.ArgumentTypes.FunctionArg[]
  nameWithType.vb: FunctionArg()
  fullName.vb: Fluency.Execution.Parsing.Entities.ArgumentTypes.FunctionArg()
  name.vb: FunctionArg()
  spec.csharp:
  - uid: Fluency.Execution.Parsing.Entities.ArgumentTypes.FunctionArg
    name: FunctionArg
    nameWithType: FunctionArg
    fullName: Fluency.Execution.Parsing.Entities.ArgumentTypes.FunctionArg
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Fluency.Execution.Parsing.Entities.ArgumentTypes.FunctionArg
    name: FunctionArg
    nameWithType: FunctionArg
    fullName: Fluency.Execution.Parsing.Entities.ArgumentTypes.FunctionArg
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.#ctor*
  commentId: Overload:Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.#ctor
  name: FunctionGraph
  nameWithType: FunctionGraph.FunctionGraph
  fullName: Fluency.Execution.Parsing.Entities.FunctionGraph.FunctionGraph.FunctionGraph
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Fluency.Execution.Parsing.Entities.FunctionToken}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Fluency.Execution.Parsing.Entities.FunctionToken}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IEnumerable<FunctionToken>>
  nameWithType: IEnumerable<IEnumerable<FunctionToken>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<Fluency.Execution.Parsing.Entities.FunctionToken>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of FunctionToken))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of Fluency.Execution.Parsing.Entities.FunctionToken))
  name.vb: IEnumerable(Of IEnumerable(Of FunctionToken))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Fluency.Execution.Parsing.Entities.FunctionToken
    name: FunctionToken
    nameWithType: FunctionToken
    fullName: Fluency.Execution.Parsing.Entities.FunctionToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Fluency.Execution.Parsing.Entities.FunctionToken
    name: FunctionToken
    nameWithType: FunctionToken
    fullName: Fluency.Execution.Parsing.Entities.FunctionToken
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
