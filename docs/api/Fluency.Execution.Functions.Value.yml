### YamlMime:ManagedReference
items:
- uid: Fluency.Execution.Functions.Value
  commentId: T:Fluency.Execution.Functions.Value
  id: Value
  parent: Fluency.Execution.Functions
  children:
  - Fluency.Execution.Functions.Value.#ctor(Fluency.Execution.Parsing.Entities.Argument)
  - Fluency.Execution.Functions.Value.#ctor(System.Object,Fluency.Common.FluencyType)
  - Fluency.Execution.Functions.Value.Done
  - Fluency.Execution.Functions.Value.Equals(Fluency.Execution.Functions.Value)
  - Fluency.Execution.Functions.Value.Equals(System.Object)
  - Fluency.Execution.Functions.Value.Finished
  - Fluency.Execution.Functions.Value.Get``1(System.Nullable{Fluency.Common.FluencyType},System.String)
  - Fluency.Execution.Functions.Value.GetHashCode
  - Fluency.Execution.Functions.Value.op_Implicit(Fluency.Execution.Functions.Value)~System.Boolean
  - Fluency.Execution.Functions.Value.ToString
  - Fluency.Execution.Functions.Value.Type
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Value
  fullName: Fluency.Execution.Functions.Value
  type: Class
  source:
    remote:
      path: Execution/Execution/Functions/Value.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Value
    path: ../Execution/Execution/Functions/Value.cs
    startLine: 11
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  summary: "\nRepresents a value that Fluency functions operate on.\n"
  example: []
  syntax:
    content: 'public class Value : IEquatable<Value>'
    content.vb: >-
      Public Class Value
          Implements IEquatable(Of Value)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{Fluency.Execution.Functions.Value}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Fluency.Execution.Functions.Value.Done
  commentId: P:Fluency.Execution.Functions.Value.Done
  id: Done
  parent: Fluency.Execution.Functions.Value
  langs:
  - csharp
  - vb
  name: Done
  nameWithType: Value.Done
  fullName: Fluency.Execution.Functions.Value.Done
  type: Property
  source:
    remote:
      path: Execution/Execution/Functions/Value.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Done
    path: ../Execution/Execution/Functions/Value.cs
    startLine: 18
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  summary: "\nReturned when the called function has no more work to do.\n"
  example: []
  syntax:
    content: public bool Done { get; }
    parameters: []
    return:
      type: System.Boolean
      description: ''
    content.vb: Public ReadOnly Property Done As Boolean
  overload: Fluency.Execution.Functions.Value.Done*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Fluency.Execution.Functions.Value.Type
  commentId: P:Fluency.Execution.Functions.Value.Type
  id: Type
  parent: Fluency.Execution.Functions.Value
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Value.Type
  fullName: Fluency.Execution.Functions.Value.Type
  type: Property
  source:
    remote:
      path: Execution/Execution/Functions/Value.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Type
    path: ../Execution/Execution/Functions/Value.cs
    startLine: 24
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  summary: "\nThe type of this value.\n"
  example: []
  syntax:
    content: public FluencyType Type { get; }
    parameters: []
    return:
      type: Fluency.Common.FluencyType
      description: ''
    content.vb: Public ReadOnly Property Type As FluencyType
  overload: Fluency.Execution.Functions.Value.Type*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Fluency.Execution.Functions.Value.#ctor(Fluency.Execution.Parsing.Entities.Argument)
  commentId: M:Fluency.Execution.Functions.Value.#ctor(Fluency.Execution.Parsing.Entities.Argument)
  id: '#ctor(Fluency.Execution.Parsing.Entities.Argument)'
  parent: Fluency.Execution.Functions.Value
  langs:
  - csharp
  - vb
  name: Value(Argument)
  nameWithType: Value.Value(Argument)
  fullName: Fluency.Execution.Functions.Value.Value(Fluency.Execution.Parsing.Entities.Argument)
  type: Constructor
  source:
    remote:
      path: Execution/Execution/Functions/Value.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: .ctor
    path: ../Execution/Execution/Functions/Value.cs
    startLine: 32
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  summary: "\nConstruct a value from a parsed function argument.\n"
  example: []
  syntax:
    content: public Value(Argument arg)
    parameters:
    - id: arg
      type: Fluency.Execution.Parsing.Entities.Argument
      description: ''
    content.vb: Public Sub New(arg As Argument)
  overload: Fluency.Execution.Functions.Value.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Fluency.Execution.Functions.Value.Get``1(System.Nullable{Fluency.Common.FluencyType},System.String)
  commentId: M:Fluency.Execution.Functions.Value.Get``1(System.Nullable{Fluency.Common.FluencyType},System.String)
  id: Get``1(System.Nullable{Fluency.Common.FluencyType},System.String)
  parent: Fluency.Execution.Functions.Value
  langs:
  - csharp
  - vb
  name: Get<T>(Nullable<FluencyType>, String)
  nameWithType: Value.Get<T>(Nullable<FluencyType>, String)
  fullName: Fluency.Execution.Functions.Value.Get<T>(System.Nullable<Fluency.Common.FluencyType>, System.String)
  type: Method
  source:
    remote:
      path: Execution/Execution/Functions/Value.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Get
    path: ../Execution/Execution/Functions/Value.cs
    startLine: 44
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  summary: "\nGet the value inside the type.\n"
  example: []
  syntax:
    content: public T Get<T>(FluencyType? expected = default(FluencyType? ), string failMessage = null)
    parameters:
    - id: expected
      type: System.Nullable{Fluency.Common.FluencyType}
    - id: failMessage
      type: System.String
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Public Function Get(Of T)(expected As FluencyType? = Nothing, failMessage As String = Nothing) As T
  overload: Fluency.Execution.Functions.Value.Get*
  nameWithType.vb: Value.Get(Of T)(Nullable(Of FluencyType), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Fluency.Execution.Functions.Value.Get(Of T)(System.Nullable(Of Fluency.Common.FluencyType), System.String)
  name.vb: Get(Of T)(Nullable(Of FluencyType), String)
- uid: Fluency.Execution.Functions.Value.#ctor(System.Object,Fluency.Common.FluencyType)
  commentId: M:Fluency.Execution.Functions.Value.#ctor(System.Object,Fluency.Common.FluencyType)
  id: '#ctor(System.Object,Fluency.Common.FluencyType)'
  parent: Fluency.Execution.Functions.Value
  langs:
  - csharp
  - vb
  name: Value(Object, FluencyType)
  nameWithType: Value.Value(Object, FluencyType)
  fullName: Fluency.Execution.Functions.Value.Value(System.Object, Fluency.Common.FluencyType)
  type: Constructor
  source:
    remote:
      path: Execution/Execution/Functions/Value.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: .ctor
    path: ../Execution/Execution/Functions/Value.cs
    startLine: 66
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  summary: "\nConstruct a value from a C# value and a type.\n"
  example: []
  syntax:
    content: public Value(object value, FluencyType type)
    parameters:
    - id: value
      type: System.Object
      description: ''
    - id: type
      type: Fluency.Common.FluencyType
      description: ''
    content.vb: Public Sub New(value As Object, type As FluencyType)
  overload: Fluency.Execution.Functions.Value.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Fluency.Execution.Functions.Value.op_Implicit(Fluency.Execution.Functions.Value)~System.Boolean
  commentId: M:Fluency.Execution.Functions.Value.op_Implicit(Fluency.Execution.Functions.Value)~System.Boolean
  id: op_Implicit(Fluency.Execution.Functions.Value)~System.Boolean
  parent: Fluency.Execution.Functions.Value
  langs:
  - csharp
  - vb
  name: Implicit(Value to Boolean)
  nameWithType: Value.Implicit(Value to Boolean)
  fullName: Fluency.Execution.Functions.Value.Implicit(Fluency.Execution.Functions.Value to System.Boolean)
  type: Operator
  source:
    remote:
      path: Execution/Execution/Functions/Value.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: op_Implicit
    path: ../Execution/Execution/Functions/Value.cs
    startLine: 78
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  summary: "\nThe Done value converts to false, all others to true. This is so you can do something like (while (NextValue()) { doSomething(); }\n"
  example: []
  syntax:
    content: public static implicit operator bool (Value v)
    parameters:
    - id: v
      type: Fluency.Execution.Functions.Value
    return:
      type: System.Boolean
    content.vb: Public Shared Widening Operator CType(v As Value) As Boolean
  overload: Fluency.Execution.Functions.Value.op_Implicit*
  nameWithType.vb: Value.Widening(Value to Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Fluency.Execution.Functions.Value.Widening(Fluency.Execution.Functions.Value to System.Boolean)
  name.vb: Widening(Value to Boolean)
- uid: Fluency.Execution.Functions.Value.Finished
  commentId: P:Fluency.Execution.Functions.Value.Finished
  id: Finished
  parent: Fluency.Execution.Functions.Value
  langs:
  - csharp
  - vb
  name: Finished
  nameWithType: Value.Finished
  fullName: Fluency.Execution.Functions.Value.Finished
  type: Property
  source:
    remote:
      path: Execution/Execution/Functions/Value.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Finished
    path: ../Execution/Execution/Functions/Value.cs
    startLine: 85
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  summary: "\nThe &quot;done&quot; Value that indicates there&apos;s no more work.\n"
  example: []
  syntax:
    content: public static Value Finished { get; }
    parameters: []
    return:
      type: Fluency.Execution.Functions.Value
    content.vb: Public Shared ReadOnly Property Finished As Value
  overload: Fluency.Execution.Functions.Value.Finished*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Fluency.Execution.Functions.Value.Equals(Fluency.Execution.Functions.Value)
  commentId: M:Fluency.Execution.Functions.Value.Equals(Fluency.Execution.Functions.Value)
  id: Equals(Fluency.Execution.Functions.Value)
  parent: Fluency.Execution.Functions.Value
  langs:
  - csharp
  - vb
  name: Equals(Value)
  nameWithType: Value.Equals(Value)
  fullName: Fluency.Execution.Functions.Value.Equals(Fluency.Execution.Functions.Value)
  type: Method
  source:
    remote:
      path: Execution/Execution/Functions/Value.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Equals
    path: ../Execution/Execution/Functions/Value.cs
    startLine: 94
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  summary: "\nTwo Values are equal if and only if:\n- they are both Done OR\n- neither of them are done AND they have the same type and value.\n"
  example: []
  syntax:
    content: public bool Equals(Value other)
    parameters:
    - id: other
      type: Fluency.Execution.Functions.Value
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function Equals(other As Value) As Boolean
  overload: Fluency.Execution.Functions.Value.Equals*
  implements:
  - System.IEquatable{Fluency.Execution.Functions.Value}.Equals(Fluency.Execution.Functions.Value)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Fluency.Execution.Functions.Value.ToString
  commentId: M:Fluency.Execution.Functions.Value.ToString
  id: ToString
  parent: Fluency.Execution.Functions.Value
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Value.ToString()
  fullName: Fluency.Execution.Functions.Value.ToString()
  type: Method
  source:
    remote:
      path: Execution/Execution/Functions/Value.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: ToString
    path: ../Execution/Execution/Functions/Value.cs
    startLine: 101
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Fluency.Execution.Functions.Value.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Fluency.Execution.Functions.Value.Equals(System.Object)
  commentId: M:Fluency.Execution.Functions.Value.Equals(System.Object)
  id: Equals(System.Object)
  parent: Fluency.Execution.Functions.Value
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Value.Equals(Object)
  fullName: Fluency.Execution.Functions.Value.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Execution/Execution/Functions/Value.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Equals
    path: ../Execution/Execution/Functions/Value.cs
    startLine: 107
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  syntax:
    content: public override bool Equals(object other)
    parameters:
    - id: other
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(other As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Fluency.Execution.Functions.Value.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Fluency.Execution.Functions.Value.GetHashCode
  commentId: M:Fluency.Execution.Functions.Value.GetHashCode
  id: GetHashCode
  parent: Fluency.Execution.Functions.Value
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Value.GetHashCode()
  fullName: Fluency.Execution.Functions.Value.GetHashCode()
  type: Method
  source:
    remote:
      path: Execution/Execution/Functions/Value.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: GetHashCode
    path: ../Execution/Execution/Functions/Value.cs
    startLine: 115
  assemblies:
  - Execution
  namespace: Fluency.Execution.Functions
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Fluency.Execution.Functions.Value.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Fluency.Execution.Functions
  commentId: N:Fluency.Execution.Functions
  name: Fluency.Execution.Functions
  nameWithType: Fluency.Execution.Functions
  fullName: Fluency.Execution.Functions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{Fluency.Execution.Functions.Value}
  commentId: T:System.IEquatable{Fluency.Execution.Functions.Value}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Value>
  nameWithType: IEquatable<Value>
  fullName: System.IEquatable<Fluency.Execution.Functions.Value>
  nameWithType.vb: IEquatable(Of Value)
  fullName.vb: System.IEquatable(Of Fluency.Execution.Functions.Value)
  name.vb: IEquatable(Of Value)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Fluency.Execution.Functions.Value
    name: Value
    nameWithType: Value
    fullName: Fluency.Execution.Functions.Value
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Fluency.Execution.Functions.Value
    name: Value
    nameWithType: Value
    fullName: Fluency.Execution.Functions.Value
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.Value.Done*
  commentId: Overload:Fluency.Execution.Functions.Value.Done
  name: Done
  nameWithType: Value.Done
  fullName: Fluency.Execution.Functions.Value.Done
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Fluency.Execution.Functions.Value.Type*
  commentId: Overload:Fluency.Execution.Functions.Value.Type
  name: Type
  nameWithType: Value.Type
  fullName: Fluency.Execution.Functions.Value.Type
- uid: Fluency.Common.FluencyType
  commentId: T:Fluency.Common.FluencyType
  parent: Fluency.Common
  name: FluencyType
  nameWithType: FluencyType
  fullName: Fluency.Common.FluencyType
- uid: Fluency.Common
  commentId: N:Fluency.Common
  name: Fluency.Common
  nameWithType: Fluency.Common
  fullName: Fluency.Common
- uid: Fluency.Execution.Functions.Value.#ctor*
  commentId: Overload:Fluency.Execution.Functions.Value.#ctor
  name: Value
  nameWithType: Value.Value
  fullName: Fluency.Execution.Functions.Value.Value
- uid: Fluency.Execution.Parsing.Entities.Argument
  commentId: T:Fluency.Execution.Parsing.Entities.Argument
  parent: Fluency.Execution.Parsing.Entities
  name: Argument
  nameWithType: Argument
  fullName: Fluency.Execution.Parsing.Entities.Argument
- uid: Fluency.Execution.Parsing.Entities
  commentId: N:Fluency.Execution.Parsing.Entities
  name: Fluency.Execution.Parsing.Entities
  nameWithType: Fluency.Execution.Parsing.Entities
  fullName: Fluency.Execution.Parsing.Entities
- uid: Fluency.Execution.Functions.Value.Get*
  commentId: Overload:Fluency.Execution.Functions.Value.Get
  name: Get
  nameWithType: Value.Get
  fullName: Fluency.Execution.Functions.Value.Get
- uid: System.Nullable{Fluency.Common.FluencyType}
  commentId: T:System.Nullable{Fluency.Common.FluencyType}
  parent: System
  definition: System.Nullable`1
  name: Nullable<FluencyType>
  nameWithType: Nullable<FluencyType>
  fullName: System.Nullable<Fluency.Common.FluencyType>
  nameWithType.vb: Nullable(Of FluencyType)
  fullName.vb: System.Nullable(Of Fluency.Common.FluencyType)
  name.vb: Nullable(Of FluencyType)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Fluency.Common.FluencyType
    name: FluencyType
    nameWithType: FluencyType
    fullName: Fluency.Common.FluencyType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Fluency.Common.FluencyType
    name: FluencyType
    nameWithType: FluencyType
    fullName: Fluency.Common.FluencyType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Fluency.Execution.Functions.Value.op_Implicit*
  commentId: Overload:Fluency.Execution.Functions.Value.op_Implicit
  name: Implicit
  nameWithType: Value.Implicit
  fullName: Fluency.Execution.Functions.Value.Implicit
  nameWithType.vb: Value.Widening
  fullName.vb: Fluency.Execution.Functions.Value.Widening
  name.vb: Widening
- uid: Fluency.Execution.Functions.Value
  commentId: T:Fluency.Execution.Functions.Value
  parent: Fluency.Execution.Functions
  name: Value
  nameWithType: Value
  fullName: Fluency.Execution.Functions.Value
- uid: Fluency.Execution.Functions.Value.Finished*
  commentId: Overload:Fluency.Execution.Functions.Value.Finished
  name: Finished
  nameWithType: Value.Finished
  fullName: Fluency.Execution.Functions.Value.Finished
- uid: Fluency.Execution.Functions.Value.Equals*
  commentId: Overload:Fluency.Execution.Functions.Value.Equals
  name: Equals
  nameWithType: Value.Equals
  fullName: Fluency.Execution.Functions.Value.Equals
- uid: System.IEquatable{Fluency.Execution.Functions.Value}.Equals(Fluency.Execution.Functions.Value)
  commentId: M:System.IEquatable{Fluency.Execution.Functions.Value}.Equals(Fluency.Execution.Functions.Value)
  parent: System.IEquatable{Fluency.Execution.Functions.Value}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Value)
  nameWithType: IEquatable<Value>.Equals(Value)
  fullName: System.IEquatable<Fluency.Execution.Functions.Value>.Equals(Fluency.Execution.Functions.Value)
  nameWithType.vb: IEquatable(Of Value).Equals(Value)
  fullName.vb: System.IEquatable(Of Fluency.Execution.Functions.Value).Equals(Fluency.Execution.Functions.Value)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Value>.Equals
    fullName: System.IEquatable<Fluency.Execution.Functions.Value>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Fluency.Execution.Functions.Value
    name: Value
    nameWithType: Value
    fullName: Fluency.Execution.Functions.Value
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Value).Equals
    fullName: System.IEquatable(Of Fluency.Execution.Functions.Value).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Fluency.Execution.Functions.Value
    name: Value
    nameWithType: Value
    fullName: Fluency.Execution.Functions.Value
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.Value.ToString*
  commentId: Overload:Fluency.Execution.Functions.Value.ToString
  name: ToString
  nameWithType: Value.ToString
  fullName: Fluency.Execution.Functions.Value.ToString
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Functions.Value.GetHashCode*
  commentId: Overload:Fluency.Execution.Functions.Value.GetHashCode
  name: GetHashCode
  nameWithType: Value.GetHashCode
  fullName: Fluency.Execution.Functions.Value.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
