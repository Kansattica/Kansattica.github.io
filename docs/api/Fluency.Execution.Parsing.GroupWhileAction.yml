### YamlMime:ManagedReference
items:
- uid: Fluency.Execution.Parsing.GroupWhileAction
  commentId: T:Fluency.Execution.Parsing.GroupWhileAction
  id: GroupWhileAction
  parent: Fluency.Execution.Parsing
  children:
  - Fluency.Execution.Parsing.GroupWhileAction.In
  - Fluency.Execution.Parsing.GroupWhileAction.LeaveExclude
  - Fluency.Execution.Parsing.GroupWhileAction.LeaveInclude
  - Fluency.Execution.Parsing.GroupWhileAction.StillOut
  langs:
  - csharp
  - vb
  name: GroupWhileAction
  nameWithType: GroupWhileAction
  fullName: Fluency.Execution.Parsing.GroupWhileAction
  type: Enum
  source:
    remote:
      path: Execution/Parsing/ParseExtensions.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: GroupWhileAction
    path: ../Execution/Parsing/ParseExtensions.cs
    startLine: 240
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing
  summary: "\nActions you can instruct <xref href=\"Fluency.Execution.Parsing.ParseExtensions.GroupWhile%60%601(System.Collections.Generic.IEnumerable%7b%60%600%7d%2cSystem.Func%7b%60%600%2cSystem.Boolean%2cFluency.Execution.Parsing.GroupWhileAction%7d)\" data-throw-if-not-resolved=\"false\"></xref> to take from its callback.\n"
  example: []
  syntax:
    content: public enum GroupWhileAction
    content.vb: Public Enum GroupWhileAction
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: Fluency.Execution.Parsing.GroupWhileAction.In
  commentId: F:Fluency.Execution.Parsing.GroupWhileAction.In
  id: In
  parent: Fluency.Execution.Parsing.GroupWhileAction
  langs:
  - csharp
  - vb
  name: In
  nameWithType: GroupWhileAction.In
  fullName: Fluency.Execution.Parsing.GroupWhileAction.In
  type: Field
  source:
    remote:
      path: Execution/Parsing/ParseExtensions.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: In
    path: ../Execution/Parsing/ParseExtensions.cs
    startLine: 246
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing
  summary: "\nAdd the current item into the group, starting a new one if necessary.\n"
  example: []
  syntax:
    content: In = 0
    return:
      type: Fluency.Execution.Parsing.GroupWhileAction
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Fluency.Execution.Parsing.GroupWhileAction.StillOut
  commentId: F:Fluency.Execution.Parsing.GroupWhileAction.StillOut
  id: StillOut
  parent: Fluency.Execution.Parsing.GroupWhileAction
  langs:
  - csharp
  - vb
  name: StillOut
  nameWithType: GroupWhileAction.StillOut
  fullName: Fluency.Execution.Parsing.GroupWhileAction.StillOut
  type: Field
  source:
    remote:
      path: Execution/Parsing/ParseExtensions.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: StillOut
    path: ../Execution/Parsing/ParseExtensions.cs
    startLine: 251
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing
  summary: "\nWe&apos;re not making a group, and this element should stay out of the group. Only return this if pickAction was passed false.\n"
  example: []
  syntax:
    content: StillOut = 1
    return:
      type: Fluency.Execution.Parsing.GroupWhileAction
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Fluency.Execution.Parsing.GroupWhileAction.LeaveInclude
  commentId: F:Fluency.Execution.Parsing.GroupWhileAction.LeaveInclude
  id: LeaveInclude
  parent: Fluency.Execution.Parsing.GroupWhileAction
  langs:
  - csharp
  - vb
  name: LeaveInclude
  nameWithType: GroupWhileAction.LeaveInclude
  fullName: Fluency.Execution.Parsing.GroupWhileAction.LeaveInclude
  type: Field
  source:
    remote:
      path: Execution/Parsing/ParseExtensions.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: LeaveInclude
    path: ../Execution/Parsing/ParseExtensions.cs
    startLine: 256
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing
  summary: "\nFinish the current group and put this item in it.\n"
  example: []
  syntax:
    content: LeaveInclude = 2
    return:
      type: Fluency.Execution.Parsing.GroupWhileAction
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Fluency.Execution.Parsing.GroupWhileAction.LeaveExclude
  commentId: F:Fluency.Execution.Parsing.GroupWhileAction.LeaveExclude
  id: LeaveExclude
  parent: Fluency.Execution.Parsing.GroupWhileAction
  langs:
  - csharp
  - vb
  name: LeaveExclude
  nameWithType: GroupWhileAction.LeaveExclude
  fullName: Fluency.Execution.Parsing.GroupWhileAction.LeaveExclude
  type: Field
  source:
    remote:
      path: Execution/Parsing/ParseExtensions.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: LeaveExclude
    path: ../Execution/Parsing/ParseExtensions.cs
    startLine: 261
  assemblies:
  - Execution
  namespace: Fluency.Execution.Parsing
  summary: "\nFinish the current group and don&apos;t put this item in it.\n"
  example: []
  syntax:
    content: LeaveExclude = 3
    return:
      type: Fluency.Execution.Parsing.GroupWhileAction
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: Fluency.Execution.Parsing.ParseExtensions.GroupWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean,Fluency.Execution.Parsing.GroupWhileAction})
  commentId: M:Fluency.Execution.Parsing.ParseExtensions.GroupWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean,Fluency.Execution.Parsing.GroupWhileAction})
  isExternal: true
  name: GroupWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean, GroupWhileAction>)
  nameWithType: ParseExtensions.GroupWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean, GroupWhileAction>)
  fullName: Fluency.Execution.Parsing.ParseExtensions.GroupWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean, Fluency.Execution.Parsing.GroupWhileAction>)
  nameWithType.vb: ParseExtensions.GroupWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean, GroupWhileAction))
  fullName.vb: Fluency.Execution.Parsing.ParseExtensions.GroupWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean, Fluency.Execution.Parsing.GroupWhileAction))
  name.vb: GroupWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean, GroupWhileAction))
  spec.csharp:
  - uid: Fluency.Execution.Parsing.ParseExtensions.GroupWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean,Fluency.Execution.Parsing.GroupWhileAction})
    name: GroupWhile<TSource>
    nameWithType: ParseExtensions.GroupWhile<TSource>
    fullName: Fluency.Execution.Parsing.ParseExtensions.GroupWhile<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Fluency.Execution.Parsing.GroupWhileAction
    name: GroupWhileAction
    nameWithType: GroupWhileAction
    fullName: Fluency.Execution.Parsing.GroupWhileAction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fluency.Execution.Parsing.ParseExtensions.GroupWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean,Fluency.Execution.Parsing.GroupWhileAction})
    name: GroupWhile(Of TSource)
    nameWithType: ParseExtensions.GroupWhile(Of TSource)
    fullName: Fluency.Execution.Parsing.ParseExtensions.GroupWhile(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Fluency.Execution.Parsing.GroupWhileAction
    name: GroupWhileAction
    nameWithType: GroupWhileAction
    fullName: Fluency.Execution.Parsing.GroupWhileAction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Parsing
  commentId: N:Fluency.Execution.Parsing
  name: Fluency.Execution.Parsing
  nameWithType: Fluency.Execution.Parsing
  fullName: Fluency.Execution.Parsing
- uid: Fluency.Execution.Parsing.GroupWhileAction
  commentId: T:Fluency.Execution.Parsing.GroupWhileAction
  parent: Fluency.Execution.Parsing
  name: GroupWhileAction
  nameWithType: GroupWhileAction
  fullName: Fluency.Execution.Parsing.GroupWhileAction
