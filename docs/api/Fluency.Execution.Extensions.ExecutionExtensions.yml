### YamlMime:ManagedReference
items:
- uid: Fluency.Execution.Extensions.ExecutionExtensions
  commentId: T:Fluency.Execution.Extensions.ExecutionExtensions
  id: ExecutionExtensions
  parent: Fluency.Execution.Extensions
  children:
  - Fluency.Execution.Extensions.ExecutionExtensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})
  - Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
  - Fluency.Execution.Extensions.ExecutionExtensions.TryDequeue``1(System.Collections.Generic.Queue{``0},``0@)
  langs:
  - csharp
  - vb
  name: ExecutionExtensions
  nameWithType: ExecutionExtensions
  fullName: Fluency.Execution.Extensions.ExecutionExtensions
  type: Class
  source:
    remote:
      path: Execution/Execution/ExecutionExtensions.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: ExecutionExtensions
    path: ../Execution/Execution/ExecutionExtensions.cs
    startLine: 10
  assemblies:
  - Execution
  namespace: Fluency.Execution.Extensions
  summary: "\nExtension methods to help execution.\n"
  example: []
  syntax:
    content: public static class ExecutionExtensions
    content.vb: Public Module ExecutionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
  commentId: M:Fluency.Execution.Extensions.ExecutionExtensions.Is``1(Fluency.Execution.Functions.IFunction,System.String)
  id: Is``1(Fluency.Execution.Functions.IFunction,System.String)
  isExtensionMethod: true
  parent: Fluency.Execution.Extensions.ExecutionExtensions
  langs:
  - csharp
  - vb
  name: Is<T>(IFunction, String)
  nameWithType: ExecutionExtensions.Is<T>(IFunction, String)
  fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is<T>(Fluency.Execution.Functions.IFunction, System.String)
  type: Method
  source:
    remote:
      path: Execution/Execution/ExecutionExtensions.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: Is
    path: ../Execution/Execution/ExecutionExtensions.cs
    startLine: 20
  assemblies:
  - Execution
  namespace: Fluency.Execution.Extensions
  summary: "\nAsserts that this IFunction also implements interface T, usually one of the I[Top|Bottom][InOut] interfaces.\n"
  example: []
  syntax:
    content: >-
      public static T Is<T>(this IFunction function, string extraInfo = null)
          where T : IFunction
    parameters:
    - id: function
      type: Fluency.Execution.Functions.IFunction
      description: ''
    - id: extraInfo
      type: System.String
      description: Will be added to the exception, if thrown.
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Is(Of T As IFunction)(function As IFunction, extraInfo As String = Nothing) As T
  overload: Fluency.Execution.Extensions.ExecutionExtensions.Is*
  exceptions:
  - type: Fluency.Execution.Exceptions.ExecutionException
    commentId: T:Fluency.Execution.Exceptions.ExecutionException
    description: Thrown if function is not a T
  nameWithType.vb: ExecutionExtensions.Is(Of T)(IFunction, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Fluency.Execution.Extensions.ExecutionExtensions.Is(Of T)(Fluency.Execution.Functions.IFunction, System.String)
  name.vb: Is(Of T)(IFunction, String)
- uid: Fluency.Execution.Extensions.ExecutionExtensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Fluency.Execution.Extensions.ExecutionExtensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})
  id: EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Fluency.Execution.Extensions.ExecutionExtensions
  langs:
  - csharp
  - vb
  name: EnqueueRange<T>(Queue<T>, IEnumerable<T>)
  nameWithType: ExecutionExtensions.EnqueueRange<T>(Queue<T>, IEnumerable<T>)
  fullName: Fluency.Execution.Extensions.ExecutionExtensions.EnqueueRange<T>(System.Collections.Generic.Queue<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Execution/Execution/ExecutionExtensions.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: EnqueueRange
    path: ../Execution/Execution/ExecutionExtensions.cs
    startLine: 39
  assemblies:
  - Execution
  namespace: Fluency.Execution.Extensions
  summary: "\nPuts everything in range into the queue.\n"
  example: []
  syntax:
    content: public static void EnqueueRange<T>(this Queue<T> queue, IEnumerable<T> range)
    parameters:
    - id: queue
      type: System.Collections.Generic.Queue{{T}}
      description: ''
    - id: range
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub EnqueueRange(Of T)(queue As Queue(Of T), range As IEnumerable(Of T))
  overload: Fluency.Execution.Extensions.ExecutionExtensions.EnqueueRange*
  nameWithType.vb: ExecutionExtensions.EnqueueRange(Of T)(Queue(Of T), IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Fluency.Execution.Extensions.ExecutionExtensions.EnqueueRange(Of T)(System.Collections.Generic.Queue(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: EnqueueRange(Of T)(Queue(Of T), IEnumerable(Of T))
- uid: Fluency.Execution.Extensions.ExecutionExtensions.TryDequeue``1(System.Collections.Generic.Queue{``0},``0@)
  commentId: M:Fluency.Execution.Extensions.ExecutionExtensions.TryDequeue``1(System.Collections.Generic.Queue{``0},``0@)
  id: TryDequeue``1(System.Collections.Generic.Queue{``0},``0@)
  isExtensionMethod: true
  parent: Fluency.Execution.Extensions.ExecutionExtensions
  langs:
  - csharp
  - vb
  name: TryDequeue<T>(Queue<T>, out T)
  nameWithType: ExecutionExtensions.TryDequeue<T>(Queue<T>, out T)
  fullName: Fluency.Execution.Extensions.ExecutionExtensions.TryDequeue<T>(System.Collections.Generic.Queue<T>, out T)
  type: Method
  source:
    remote:
      path: Execution/Execution/ExecutionExtensions.cs
      branch: 0244abd8aff50a2eb5c9fdca9193885cff638193
      repo: https://github.com/Kansattica/Fluency.git
    id: TryDequeue
    path: ../Execution/Execution/ExecutionExtensions.cs
    startLine: 54
  assemblies:
  - Execution
  namespace: Fluency.Execution.Extensions
  summary: "\nTry to get a value from queue. Returns true if it found one.\n"
  example: []
  syntax:
    content: public static bool TryDequeue<T>(this Queue<T> queue, out T value)
    parameters:
    - id: queue
      type: System.Collections.Generic.Queue{{T}}
      description: ''
    - id: value
      type: '{T}'
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryDequeue(Of T)(queue As Queue(Of T), ByRef value As T) As Boolean
  overload: Fluency.Execution.Extensions.ExecutionExtensions.TryDequeue*
  nameWithType.vb: ExecutionExtensions.TryDequeue(Of T)(Queue(Of T), ByRef T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Fluency.Execution.Extensions.ExecutionExtensions.TryDequeue(Of T)(System.Collections.Generic.Queue(Of T), ByRef T)
  name.vb: TryDequeue(Of T)(Queue(Of T), ByRef T)
references:
- uid: Fluency.Execution.Extensions
  commentId: N:Fluency.Execution.Extensions
  name: Fluency.Execution.Extensions
  nameWithType: Fluency.Execution.Extensions
  fullName: Fluency.Execution.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Fluency.Execution.Exceptions.ExecutionException
  commentId: T:Fluency.Execution.Exceptions.ExecutionException
  name: ExecutionException
  nameWithType: ExecutionException
  fullName: Fluency.Execution.Exceptions.ExecutionException
- uid: Fluency.Execution.Extensions.ExecutionExtensions.Is*
  commentId: Overload:Fluency.Execution.Extensions.ExecutionExtensions.Is
  name: Is
  nameWithType: ExecutionExtensions.Is
  fullName: Fluency.Execution.Extensions.ExecutionExtensions.Is
- uid: Fluency.Execution.Functions.IFunction
  commentId: T:Fluency.Execution.Functions.IFunction
  parent: Fluency.Execution.Functions
  name: IFunction
  nameWithType: IFunction
  fullName: Fluency.Execution.Functions.IFunction
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Fluency.Execution.Functions
  commentId: N:Fluency.Execution.Functions
  name: Fluency.Execution.Functions
  nameWithType: Fluency.Execution.Functions
  fullName: Fluency.Execution.Functions
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Fluency.Execution.Extensions.ExecutionExtensions.EnqueueRange*
  commentId: Overload:Fluency.Execution.Extensions.ExecutionExtensions.EnqueueRange
  name: EnqueueRange
  nameWithType: ExecutionExtensions.EnqueueRange
  fullName: Fluency.Execution.Extensions.ExecutionExtensions.EnqueueRange
- uid: System.Collections.Generic.Queue{{T}}
  commentId: T:System.Collections.Generic.Queue{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Queue`1
  name: Queue<T>
  nameWithType: Queue<T>
  fullName: System.Collections.Generic.Queue<T>
  nameWithType.vb: Queue(Of T)
  fullName.vb: System.Collections.Generic.Queue(Of T)
  name.vb: Queue(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    nameWithType: Queue
    fullName: System.Collections.Generic.Queue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    nameWithType: Queue
    fullName: System.Collections.Generic.Queue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Queue`1
  commentId: T:System.Collections.Generic.Queue`1
  isExternal: true
  name: Queue<T>
  nameWithType: Queue<T>
  fullName: System.Collections.Generic.Queue<T>
  nameWithType.vb: Queue(Of T)
  fullName.vb: System.Collections.Generic.Queue(Of T)
  name.vb: Queue(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    nameWithType: Queue
    fullName: System.Collections.Generic.Queue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    nameWithType: Queue
    fullName: System.Collections.Generic.Queue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Fluency.Execution.Extensions.ExecutionExtensions.TryDequeue*
  commentId: Overload:Fluency.Execution.Extensions.ExecutionExtensions.TryDequeue
  name: TryDequeue
  nameWithType: ExecutionExtensions.TryDequeue
  fullName: Fluency.Execution.Extensions.ExecutionExtensions.TryDequeue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
